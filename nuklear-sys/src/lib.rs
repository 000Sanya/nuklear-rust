/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int64_t = i64;
pub type uint64_t = u64;
pub type int_least64_t = int64_t;
pub type uint_least64_t = uint64_t;
pub type int_fast64_t = int64_t;
pub type uint_fast64_t = uint64_t;
pub type int32_t = i32;
pub type uint32_t = u32;
pub type int_least32_t = int32_t;
pub type uint_least32_t = uint32_t;
pub type int_fast32_t = int32_t;
pub type uint_fast32_t = uint32_t;
pub type int16_t = i16;
pub type uint16_t = u16;
pub type int_least16_t = int16_t;
pub type uint_least16_t = uint16_t;
pub type int_fast16_t = int16_t;
pub type uint_fast16_t = uint16_t;
pub type int8_t = i8;
pub type uint8_t = u8;
pub type int_least8_t = int8_t;
pub type uint_least8_t = uint8_t;
pub type int_fast8_t = int8_t;
pub type uint_fast8_t = uint8_t;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type nk_char = int8_t;
pub type nk_uchar = uint8_t;
pub type nk_byte = uint8_t;
pub type nk_short = int16_t;
pub type nk_ushort = uint16_t;
pub type nk_int = int32_t;
pub type nk_uint = uint32_t;
pub type nk_size = uintptr_t;
pub type nk_ptr = uintptr_t;
pub type nk_hash = nk_uint;
pub type nk_flags = nk_uint;
pub type nk_rune = nk_uint;
pub type _dummy_array0 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array1 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array2 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array3 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array4 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array5 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array6 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array7 = [::std::os::raw::c_char; 1usize];
pub type _dummy_array8 = [::std::os::raw::c_char; 1usize];
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum Enum_Unnamed1 { nk_false = 0, nk_true = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_color {
    pub r: nk_byte,
    pub g: nk_byte,
    pub b: nk_byte,
    pub a: nk_byte,
}
impl ::std::default::Default for nk_color {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_colorf {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
impl ::std::default::Default for nk_colorf {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_vec2 {
    pub x: f32,
    pub y: f32,
}
impl ::std::default::Default for nk_vec2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_vec2i {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
}
impl ::std::default::Default for nk_vec2i {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_rect {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
impl ::std::default::Default for nk_rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_recti {
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_short,
    pub h: ::std::os::raw::c_short,
}
impl ::std::default::Default for nk_recti {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nk_glyph = [::std::os::raw::c_char; 4usize];
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_handle {
    pub _bindgen_data_: [u64; 1usize],
}
impl nk_handle {
    pub unsafe fn ptr(&mut self) -> *mut *mut ::std::os::raw::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn id(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for nk_handle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_image {
    pub handle: nk_handle,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub region: [::std::os::raw::c_ushort; 4usize],
}
impl ::std::default::Default for nk_image {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_cursor {
    pub img: nk_image,
    pub size: nk_vec2,
    pub offset: nk_vec2,
}
impl ::std::default::Default for nk_cursor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_scroll {
    pub x: ::std::os::raw::c_ushort,
    pub y: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for nk_scroll {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_heading { NK_UP = 0, NK_RIGHT = 1, NK_DOWN = 2, NK_LEFT = 3, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_button_behavior { NK_BUTTON_DEFAULT = 0, NK_BUTTON_REPEATER = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_modify { NK_FIXED = 0, NK_MODIFIABLE = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_orientation { NK_VERTICAL = 0, NK_HORIZONTAL = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_collapse_states { NK_MINIMIZED = 0, NK_MAXIMIZED = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_show_states { NK_HIDDEN = 0, NK_SHOWN = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_chart_type {
    NK_CHART_LINES = 0,
    NK_CHART_COLUMN = 1,
    NK_CHART_MAX = 2,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_chart_event { NK_CHART_HOVERING = 1, NK_CHART_CLICKED = 2, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_color_format { NK_RGB = 0, NK_RGBA = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_popup_type { NK_POPUP_STATIC = 0, NK_POPUP_DYNAMIC = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_layout_format { NK_DYNAMIC = 0, NK_STATIC = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_tree_type { NK_TREE_NODE = 0, NK_TREE_TAB = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_anti_aliasing {
    NK_ANTI_ALIASING_OFF = 0,
    NK_ANTI_ALIASING_ON = 1,
}
pub type nk_plugin_alloc =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                               old:
                                                   *mut ::std::os::raw::c_void,
                                               arg2: nk_size)
                              -> *mut ::std::os::raw::c_void>;
pub type nk_plugin_free =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                               old:
                                                   *mut ::std::os::raw::c_void)>;
pub type nk_plugin_filter =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const nk_text_edit,
                                               unicode: nk_rune)
                              -> ::std::os::raw::c_int>;
pub type nk_plugin_paste =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                               arg2: *mut nk_text_edit)>;
pub type nk_plugin_copy =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle,
                                               arg2:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_allocator {
    pub userdata: nk_handle,
    pub alloc: nk_plugin_alloc,
    pub free: nk_plugin_free,
}
impl ::std::default::Default for nk_allocator {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_draw_null_texture {
    pub texture: nk_handle,
    pub uv: nk_vec2,
}
impl ::std::default::Default for nk_draw_null_texture {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_convert_config {
    pub global_alpha: f32,
    pub line_AA: nk_anti_aliasing,
    pub shape_AA: nk_anti_aliasing,
    pub circle_segment_count: ::std::os::raw::c_uint,
    pub arc_segment_count: ::std::os::raw::c_uint,
    pub curve_segment_count: ::std::os::raw::c_uint,
    pub null: nk_draw_null_texture,
    pub vertex_layout: *const nk_draw_vertex_layout_element,
    pub vertex_size: nk_size,
    pub vertex_alignment: nk_size,
}
impl ::std::default::Default for nk_convert_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_symbol_type {
    NK_SYMBOL_NONE = 0,
    NK_SYMBOL_X = 1,
    NK_SYMBOL_UNDERSCORE = 2,
    NK_SYMBOL_CIRCLE_SOLID = 3,
    NK_SYMBOL_CIRCLE_OUTLINE = 4,
    NK_SYMBOL_RECT_SOLID = 5,
    NK_SYMBOL_RECT_OUTLINE = 6,
    NK_SYMBOL_TRIANGLE_UP = 7,
    NK_SYMBOL_TRIANGLE_DOWN = 8,
    NK_SYMBOL_TRIANGLE_LEFT = 9,
    NK_SYMBOL_TRIANGLE_RIGHT = 10,
    NK_SYMBOL_PLUS = 11,
    NK_SYMBOL_MINUS = 12,
    NK_SYMBOL_MAX = 13,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_keys {
    NK_KEY_NONE = 0,
    NK_KEY_SHIFT = 1,
    NK_KEY_CTRL = 2,
    NK_KEY_DEL = 3,
    NK_KEY_ENTER = 4,
    NK_KEY_TAB = 5,
    NK_KEY_BACKSPACE = 6,
    NK_KEY_COPY = 7,
    NK_KEY_CUT = 8,
    NK_KEY_PASTE = 9,
    NK_KEY_UP = 10,
    NK_KEY_DOWN = 11,
    NK_KEY_LEFT = 12,
    NK_KEY_RIGHT = 13,
    NK_KEY_TEXT_INSERT_MODE = 14,
    NK_KEY_TEXT_REPLACE_MODE = 15,
    NK_KEY_TEXT_RESET_MODE = 16,
    NK_KEY_TEXT_LINE_START = 17,
    NK_KEY_TEXT_LINE_END = 18,
    NK_KEY_TEXT_START = 19,
    NK_KEY_TEXT_END = 20,
    NK_KEY_TEXT_UNDO = 21,
    NK_KEY_TEXT_REDO = 22,
    NK_KEY_TEXT_WORD_LEFT = 23,
    NK_KEY_TEXT_WORD_RIGHT = 24,
    NK_KEY_SCROLL_START = 25,
    NK_KEY_SCROLL_END = 26,
    NK_KEY_SCROLL_DOWN = 27,
    NK_KEY_SCROLL_UP = 28,
    NK_KEY_MAX = 29,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_buttons {
    NK_BUTTON_LEFT = 0,
    NK_BUTTON_MIDDLE = 1,
    NK_BUTTON_RIGHT = 2,
    NK_BUTTON_MAX = 3,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_style_colors {
    NK_COLOR_TEXT = 0,
    NK_COLOR_WINDOW = 1,
    NK_COLOR_HEADER = 2,
    NK_COLOR_BORDER = 3,
    NK_COLOR_BUTTON = 4,
    NK_COLOR_BUTTON_HOVER = 5,
    NK_COLOR_BUTTON_ACTIVE = 6,
    NK_COLOR_TOGGLE = 7,
    NK_COLOR_TOGGLE_HOVER = 8,
    NK_COLOR_TOGGLE_CURSOR = 9,
    NK_COLOR_SELECT = 10,
    NK_COLOR_SELECT_ACTIVE = 11,
    NK_COLOR_SLIDER = 12,
    NK_COLOR_SLIDER_CURSOR = 13,
    NK_COLOR_SLIDER_CURSOR_HOVER = 14,
    NK_COLOR_SLIDER_CURSOR_ACTIVE = 15,
    NK_COLOR_PROPERTY = 16,
    NK_COLOR_EDIT = 17,
    NK_COLOR_EDIT_CURSOR = 18,
    NK_COLOR_COMBO = 19,
    NK_COLOR_CHART = 20,
    NK_COLOR_CHART_COLOR = 21,
    NK_COLOR_CHART_COLOR_HIGHLIGHT = 22,
    NK_COLOR_SCROLLBAR = 23,
    NK_COLOR_SCROLLBAR_CURSOR = 24,
    NK_COLOR_SCROLLBAR_CURSOR_HOVER = 25,
    NK_COLOR_SCROLLBAR_CURSOR_ACTIVE = 26,
    NK_COLOR_TAB_HEADER = 27,
    NK_COLOR_COUNT = 28,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_style_cursor {
    NK_CURSOR_ARROW = 0,
    NK_CURSOR_TEXT = 1,
    NK_CURSOR_MOVE = 2,
    NK_CURSOR_RESIZE_VERTICAL = 3,
    NK_CURSOR_RESIZE_HORIZONTAL = 4,
    NK_CURSOR_RESIZE_TOP_LEFT_DOWN_RIGHT = 5,
    NK_CURSOR_RESIZE_TOP_RIGHT_DOWN_LEFT = 6,
    NK_CURSOR_COUNT = 7,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_widget_layout_states {
    NK_WIDGET_INVALID = 0,
    NK_WIDGET_VALID = 1,
    NK_WIDGET_ROM = 2,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_widget_states {
    NK_WIDGET_STATE_MODIFIED = 2,
    NK_WIDGET_STATE_INACTIVE = 4,
    NK_WIDGET_STATE_ENTERED = 8,
    NK_WIDGET_STATE_HOVER = 16,
    NK_WIDGET_STATE_ACTIVED = 32,
    NK_WIDGET_STATE_LEFT = 64,
    NK_WIDGET_STATE_HOVERED = 18,
    NK_WIDGET_STATE_ACTIVE = 34,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_text_align {
    NK_TEXT_ALIGN_LEFT = 1,
    NK_TEXT_ALIGN_CENTERED = 2,
    NK_TEXT_ALIGN_RIGHT = 4,
    NK_TEXT_ALIGN_TOP = 8,
    NK_TEXT_ALIGN_MIDDLE = 16,
    NK_TEXT_ALIGN_BOTTOM = 32,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_text_alignment {
    NK_TEXT_LEFT = 17,
    NK_TEXT_CENTERED = 18,
    NK_TEXT_RIGHT = 20,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_edit_flags {
    NK_EDIT_DEFAULT = 0,
    NK_EDIT_READ_ONLY = 1,
    NK_EDIT_AUTO_SELECT = 2,
    NK_EDIT_SIG_ENTER = 4,
    NK_EDIT_ALLOW_TAB = 8,
    NK_EDIT_NO_CURSOR = 16,
    NK_EDIT_SELECTABLE = 32,
    NK_EDIT_CLIPBOARD = 64,
    NK_EDIT_CTRL_ENTER_NEWLINE = 128,
    NK_EDIT_NO_HORIZONTAL_SCROLL = 256,
    NK_EDIT_ALWAYS_INSERT_MODE = 512,
    NK_EDIT_MULTILINE = 2048,
    NK_EDIT_GOTO_END_ON_ACTIVATE = 4096,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_edit_types {
    NK_EDIT_SIMPLE = 512,
    NK_EDIT_FIELD = 608,
    NK_EDIT_BOX = 2664,
    NK_EDIT_EDITOR = 2152,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_edit_events {
    NK_EDIT_ACTIVE = 1,
    NK_EDIT_INACTIVE = 2,
    NK_EDIT_ACTIVATED = 4,
    NK_EDIT_DEACTIVATED = 8,
    NK_EDIT_COMMITED = 16,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_panel_flags {
    NK_WINDOW_BORDER = 1,
    NK_WINDOW_MOVABLE = 2,
    NK_WINDOW_SCALABLE = 4,
    NK_WINDOW_CLOSABLE = 8,
    NK_WINDOW_MINIMIZABLE = 16,
    NK_WINDOW_NO_SCROLLBAR = 32,
    NK_WINDOW_TITLE = 64,
    NK_WINDOW_SCROLL_AUTO_HIDE = 128,
    NK_WINDOW_BACKGROUND = 256,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_memory_status {
    pub memory: *mut ::std::os::raw::c_void,
    pub type_: ::std::os::raw::c_uint,
    pub size: nk_size,
    pub allocated: nk_size,
    pub needed: nk_size,
    pub calls: nk_size,
}
impl ::std::default::Default for nk_memory_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_allocation_type { NK_BUFFER_FIXED = 0, NK_BUFFER_DYNAMIC = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_buffer_allocation_type {
    NK_BUFFER_FRONT = 0,
    NK_BUFFER_BACK = 1,
    NK_BUFFER_MAX = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_buffer_marker {
    pub active: ::std::os::raw::c_int,
    pub offset: nk_size,
}
impl ::std::default::Default for nk_buffer_marker {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_memory {
    pub ptr: *mut ::std::os::raw::c_void,
    pub size: nk_size,
}
impl ::std::default::Default for nk_memory {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_buffer {
    pub marker: [nk_buffer_marker; 2usize],
    pub pool: nk_allocator,
    pub type_: nk_allocation_type,
    pub memory: nk_memory,
    pub grow_factor: f32,
    pub allocated: nk_size,
    pub needed: nk_size,
    pub calls: nk_size,
    pub size: nk_size,
}
impl ::std::default::Default for nk_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_str {
    pub buffer: nk_buffer,
    pub len: ::std::os::raw::c_int,
}
impl ::std::default::Default for nk_str {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_clipboard {
    pub userdata: nk_handle,
    pub paste: nk_plugin_paste,
    pub copy: nk_plugin_copy,
}
impl ::std::default::Default for nk_clipboard {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_text_undo_record {
    pub where_: ::std::os::raw::c_int,
    pub insert_length: ::std::os::raw::c_short,
    pub delete_length: ::std::os::raw::c_short,
    pub char_storage: ::std::os::raw::c_short,
}
impl ::std::default::Default for nk_text_undo_record {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_text_undo_state {
    pub undo_rec: [nk_text_undo_record; 99usize],
    pub undo_char: [nk_rune; 999usize],
    pub undo_point: ::std::os::raw::c_short,
    pub redo_point: ::std::os::raw::c_short,
    pub undo_char_point: ::std::os::raw::c_short,
    pub redo_char_point: ::std::os::raw::c_short,
}
impl ::std::clone::Clone for nk_text_undo_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_text_undo_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_text_edit_type {
    NK_TEXT_EDIT_SINGLE_LINE = 0,
    NK_TEXT_EDIT_MULTI_LINE = 1,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_text_edit_mode {
    NK_TEXT_EDIT_MODE_VIEW = 0,
    NK_TEXT_EDIT_MODE_INSERT = 1,
    NK_TEXT_EDIT_MODE_REPLACE = 2,
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_text_edit {
    pub clip: nk_clipboard,
    pub string: nk_str,
    pub filter: nk_plugin_filter,
    pub scrollbar: nk_vec2,
    pub cursor: ::std::os::raw::c_int,
    pub select_start: ::std::os::raw::c_int,
    pub select_end: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_uchar,
    pub cursor_at_end_of_line: ::std::os::raw::c_uchar,
    pub initialized: ::std::os::raw::c_uchar,
    pub has_preferred_x: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
    pub active: ::std::os::raw::c_uchar,
    pub padding1: ::std::os::raw::c_uchar,
    pub preferred_x: f32,
    pub undo: nk_text_undo_state,
}
impl ::std::clone::Clone for nk_text_edit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_text_edit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nk_text_width_f =
    ::std::option::Option<unsafe extern "C" fn(arg1: nk_handle, h: f32,
                                               arg2:
                                                   *const ::std::os::raw::c_char,
                                               len: ::std::os::raw::c_int)
                              -> f32>;
pub type nk_query_font_glyph_f =
    ::std::option::Option<unsafe extern "C" fn(handle: nk_handle,
                                               font_height: f32,
                                               glyph: *mut nk_user_font_glyph,
                                               codepoint: nk_rune,
                                               next_codepoint: nk_rune)>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_user_font_glyph {
    pub uv: [nk_vec2; 2usize],
    pub offset: nk_vec2,
    pub width: f32,
    pub height: f32,
    pub xadvance: f32,
}
impl ::std::default::Default for nk_user_font_glyph {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_user_font {
    pub userdata: nk_handle,
    pub height: f32,
    pub width: nk_text_width_f,
    pub query: nk_query_font_glyph_f,
    pub texture: nk_handle,
}
impl ::std::default::Default for nk_user_font {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_font_coord_type { NK_COORD_UV = 0, NK_COORD_PIXEL = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_baked_font {
    pub height: f32,
    pub ascent: f32,
    pub descent: f32,
    pub glyph_offset: nk_rune,
    pub glyph_count: nk_rune,
    pub ranges: *const nk_rune,
}
impl ::std::default::Default for nk_baked_font {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_font_config {
    pub next: *mut nk_font_config,
    pub ttf_blob: *mut ::std::os::raw::c_void,
    pub ttf_size: nk_size,
    pub ttf_data_owned_by_atlas: ::std::os::raw::c_uchar,
    pub merge_mode: ::std::os::raw::c_uchar,
    pub pixel_snap: ::std::os::raw::c_uchar,
    pub oversample_v: ::std::os::raw::c_uchar,
    pub oversample_h: ::std::os::raw::c_uchar,
    pub padding: [::std::os::raw::c_uchar; 3usize],
    pub size: f32,
    pub coord_type: nk_font_coord_type,
    pub spacing: nk_vec2,
    pub range: *const nk_rune,
    pub font: *mut nk_baked_font,
    pub fallback_glyph: nk_rune,
}
impl ::std::default::Default for nk_font_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_font_glyph {
    pub codepoint: nk_rune,
    pub xadvance: f32,
    pub x0: f32,
    pub y0: f32,
    pub x1: f32,
    pub y1: f32,
    pub w: f32,
    pub h: f32,
    pub u0: f32,
    pub v0: f32,
    pub u1: f32,
    pub v1: f32,
}
impl ::std::default::Default for nk_font_glyph {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_font {
    pub next: *mut nk_font,
    pub handle: nk_user_font,
    pub info: nk_baked_font,
    pub scale: f32,
    pub glyphs: *mut nk_font_glyph,
    pub fallback: *const nk_font_glyph,
    pub fallback_codepoint: nk_rune,
    pub texture: nk_handle,
    pub config: *mut nk_font_config,
}
impl ::std::default::Default for nk_font {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_font_atlas_format {
    NK_FONT_ATLAS_ALPHA8 = 0,
    NK_FONT_ATLAS_RGBA32 = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_font_atlas {
    pub pixel: *mut ::std::os::raw::c_void,
    pub tex_width: ::std::os::raw::c_int,
    pub tex_height: ::std::os::raw::c_int,
    pub permanent: nk_allocator,
    pub temporary: nk_allocator,
    pub custom: nk_recti,
    pub cursors: [nk_cursor; 7usize],
    pub glyph_count: ::std::os::raw::c_int,
    pub glyphs: *mut nk_font_glyph,
    pub default_font: *mut nk_font,
    pub fonts: *mut nk_font,
    pub config: *mut nk_font_config,
    pub font_num: ::std::os::raw::c_int,
}
impl ::std::default::Default for nk_font_atlas {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_command_type {
    NK_COMMAND_NOP = 0,
    NK_COMMAND_SCISSOR = 1,
    NK_COMMAND_LINE = 2,
    NK_COMMAND_CURVE = 3,
    NK_COMMAND_RECT = 4,
    NK_COMMAND_RECT_FILLED = 5,
    NK_COMMAND_RECT_MULTI_COLOR = 6,
    NK_COMMAND_CIRCLE = 7,
    NK_COMMAND_CIRCLE_FILLED = 8,
    NK_COMMAND_ARC = 9,
    NK_COMMAND_ARC_FILLED = 10,
    NK_COMMAND_TRIANGLE = 11,
    NK_COMMAND_TRIANGLE_FILLED = 12,
    NK_COMMAND_POLYGON = 13,
    NK_COMMAND_POLYGON_FILLED = 14,
    NK_COMMAND_POLYLINE = 15,
    NK_COMMAND_TEXT = 16,
    NK_COMMAND_IMAGE = 17,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command {
    pub type_: nk_command_type,
    pub next: nk_size,
    pub userdata: nk_handle,
}
impl ::std::default::Default for nk_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_scissor {
    pub header: nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
}
impl ::std::default::Default for nk_command_scissor {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_line {
    pub header: nk_command,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub begin: nk_vec2i,
    pub end: nk_vec2i,
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_line {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_curve {
    pub header: nk_command,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub begin: nk_vec2i,
    pub end: nk_vec2i,
    pub ctrl: [nk_vec2i; 2usize],
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_curve {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_rect {
    pub header: nk_command,
    pub rounding: ::std::os::raw::c_ushort,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_rect {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_rect_filled {
    pub header: nk_command,
    pub rounding: ::std::os::raw::c_ushort,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_rect_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_rect_multi_color {
    pub header: nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub left: nk_color,
    pub top: nk_color,
    pub bottom: nk_color,
    pub right: nk_color,
}
impl ::std::default::Default for nk_command_rect_multi_color {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_triangle {
    pub header: nk_command,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub a: nk_vec2i,
    pub b: nk_vec2i,
    pub c: nk_vec2i,
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_triangle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_triangle_filled {
    pub header: nk_command,
    pub a: nk_vec2i,
    pub b: nk_vec2i,
    pub c: nk_vec2i,
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_triangle_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_circle {
    pub header: nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_circle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_circle_filled {
    pub header: nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_circle_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_arc {
    pub header: nk_command,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
    pub r: ::std::os::raw::c_ushort,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub a: [f32; 2usize],
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_arc {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_arc_filled {
    pub header: nk_command,
    pub cx: ::std::os::raw::c_short,
    pub cy: ::std::os::raw::c_short,
    pub r: ::std::os::raw::c_ushort,
    pub a: [f32; 2usize],
    pub color: nk_color,
}
impl ::std::default::Default for nk_command_arc_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_polygon {
    pub header: nk_command,
    pub color: nk_color,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub point_count: ::std::os::raw::c_ushort,
    pub points: [nk_vec2i; 1usize],
}
impl ::std::default::Default for nk_command_polygon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_polygon_filled {
    pub header: nk_command,
    pub color: nk_color,
    pub point_count: ::std::os::raw::c_ushort,
    pub points: [nk_vec2i; 1usize],
}
impl ::std::default::Default for nk_command_polygon_filled {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_polyline {
    pub header: nk_command,
    pub color: nk_color,
    pub line_thickness: ::std::os::raw::c_ushort,
    pub point_count: ::std::os::raw::c_ushort,
    pub points: [nk_vec2i; 1usize],
}
impl ::std::default::Default for nk_command_polyline {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_image {
    pub header: nk_command,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub img: nk_image,
    pub col: nk_color,
}
impl ::std::default::Default for nk_command_image {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_text {
    pub header: nk_command,
    pub font: *const nk_user_font,
    pub background: nk_color,
    pub foreground: nk_color,
    pub x: ::std::os::raw::c_short,
    pub y: ::std::os::raw::c_short,
    pub w: ::std::os::raw::c_ushort,
    pub h: ::std::os::raw::c_ushort,
    pub height: f32,
    pub length: ::std::os::raw::c_int,
    pub string: [::std::os::raw::c_char; 1usize],
}
impl ::std::default::Default for nk_command_text {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_command_clipping { NK_CLIPPING_OFF = 0, NK_CLIPPING_ON = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_command_buffer {
    pub base: *mut nk_buffer,
    pub clip: nk_rect,
    pub use_clipping: ::std::os::raw::c_int,
    pub userdata: nk_handle,
    pub begin: nk_size,
    pub end: nk_size,
    pub last: nk_size,
}
impl ::std::default::Default for nk_command_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_mouse_button {
    pub down: ::std::os::raw::c_int,
    pub clicked: ::std::os::raw::c_uint,
    pub clicked_pos: nk_vec2,
}
impl ::std::default::Default for nk_mouse_button {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_mouse {
    pub buttons: [nk_mouse_button; 3usize],
    pub pos: nk_vec2,
    pub prev: nk_vec2,
    pub delta: nk_vec2,
    pub scroll_delta: f32,
    pub grab: ::std::os::raw::c_uchar,
    pub grabbed: ::std::os::raw::c_uchar,
    pub ungrab: ::std::os::raw::c_uchar,
}
impl ::std::default::Default for nk_mouse {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_key {
    pub down: ::std::os::raw::c_int,
    pub clicked: ::std::os::raw::c_uint,
}
impl ::std::default::Default for nk_key {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_keyboard {
    pub keys: [nk_key; 29usize],
    pub text: [::std::os::raw::c_char; 16usize],
    pub text_len: ::std::os::raw::c_int,
}
impl ::std::default::Default for nk_keyboard {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_input {
    pub keyboard: nk_keyboard,
    pub mouse: nk_mouse,
}
impl ::std::default::Default for nk_input {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type nk_draw_index = nk_ushort;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_draw_list_stroke { NK_STROKE_OPEN = 0, NK_STROKE_CLOSED = 1, }
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_draw_vertex_layout_attribute {
    NK_VERTEX_POSITION = 0,
    NK_VERTEX_COLOR = 1,
    NK_VERTEX_TEXCOORD = 2,
    NK_VERTEX_ATTRIBUTE_COUNT = 3,
}
pub const NK_FORMAT_R8G8B8: nk_draw_vertex_layout_format =
    nk_draw_vertex_layout_format::NK_FORMAT_COLOR_BEGIN;
pub const NK_FORMAT_COLOR_END: nk_draw_vertex_layout_format =
    nk_draw_vertex_layout_format::NK_FORMAT_RGBA32;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_draw_vertex_layout_format {
    NK_FORMAT_SCHAR = 0,
    NK_FORMAT_SSHORT = 1,
    NK_FORMAT_SINT = 2,
    NK_FORMAT_UCHAR = 3,
    NK_FORMAT_USHORT = 4,
    NK_FORMAT_UINT = 5,
    NK_FORMAT_FLOAT = 6,
    NK_FORMAT_DOUBLE = 7,
    NK_FORMAT_COLOR_BEGIN = 8,
    NK_FORMAT_R16G15B16 = 9,
    NK_FORMAT_R32G32B32 = 10,
    NK_FORMAT_R8G8B8A8 = 11,
    NK_FORMAT_R16G15B16A16 = 12,
    NK_FORMAT_R32G32B32A32 = 13,
    NK_FORMAT_R32G32B32A32_FLOAT = 14,
    NK_FORMAT_R32G32B32A32_DOUBLE = 15,
    NK_FORMAT_RGB32 = 16,
    NK_FORMAT_RGBA32 = 17,
    NK_FORMAT_COUNT = 18,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_draw_vertex_layout_element {
    pub attribute: nk_draw_vertex_layout_attribute,
    pub format: nk_draw_vertex_layout_format,
    pub offset: nk_size,
}
impl ::std::default::Default for nk_draw_vertex_layout_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_draw_command {
    pub elem_count: ::std::os::raw::c_uint,
    pub clip_rect: nk_rect,
    pub texture: nk_handle,
    pub userdata: nk_handle,
}
impl ::std::default::Default for nk_draw_command {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_draw_list {
    pub config: nk_convert_config,
    pub clip_rect: nk_rect,
    pub buffer: *mut nk_buffer,
    pub vertices: *mut nk_buffer,
    pub elements: *mut nk_buffer,
    pub element_count: ::std::os::raw::c_uint,
    pub vertex_count: ::std::os::raw::c_uint,
    pub cmd_offset: nk_size,
    pub cmd_count: ::std::os::raw::c_uint,
    pub path_count: ::std::os::raw::c_uint,
    pub path_offset: ::std::os::raw::c_uint,
    pub circle_vtx: [nk_vec2; 12usize],
    pub userdata: nk_handle,
}
impl ::std::default::Default for nk_draw_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_style_item_type {
    NK_STYLE_ITEM_COLOR = 0,
    NK_STYLE_ITEM_IMAGE = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_item_data {
    pub _bindgen_data_: [u64; 3usize],
}
impl nk_style_item_data {
    pub unsafe fn image(&mut self) -> *mut nk_image {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn color(&mut self) -> *mut nk_color {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for nk_style_item_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_item {
    pub type_: nk_style_item_type,
    pub data: nk_style_item_data,
}
impl ::std::default::Default for nk_style_item {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_text {
    pub color: nk_color,
    pub padding: nk_vec2,
}
impl ::std::default::Default for nk_style_text {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_button {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub text_background: nk_color,
    pub text_normal: nk_color,
    pub text_hover: nk_color,
    pub text_active: nk_color,
    pub text_alignment: nk_flags,
    pub border: f32,
    pub rounding: f32,
    pub padding: nk_vec2,
    pub image_padding: nk_vec2,
    pub touch_padding: nk_vec2,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut nk_command_buffer,
                                                               userdata:
                                                                   nk_handle)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut nk_command_buffer,
                                                             userdata:
                                                                 nk_handle)>,
}
impl ::std::default::Default for nk_style_button {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_toggle {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub cursor_normal: nk_style_item,
    pub cursor_hover: nk_style_item,
    pub text_normal: nk_color,
    pub text_hover: nk_color,
    pub text_active: nk_color,
    pub text_background: nk_color,
    pub text_alignment: nk_flags,
    pub padding: nk_vec2,
    pub touch_padding: nk_vec2,
    pub spacing: f32,
    pub border: f32,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::default::Default for nk_style_toggle {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_selectable {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub pressed: nk_style_item,
    pub normal_active: nk_style_item,
    pub hover_active: nk_style_item,
    pub pressed_active: nk_style_item,
    pub text_normal: nk_color,
    pub text_hover: nk_color,
    pub text_pressed: nk_color,
    pub text_normal_active: nk_color,
    pub text_hover_active: nk_color,
    pub text_pressed_active: nk_color,
    pub text_background: nk_color,
    pub text_alignment: nk_flags,
    pub rounding: f32,
    pub padding: nk_vec2,
    pub touch_padding: nk_vec2,
    pub image_padding: nk_vec2,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::default::Default for nk_style_selectable {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_slider {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub bar_normal: nk_color,
    pub bar_hover: nk_color,
    pub bar_active: nk_color,
    pub bar_filled: nk_color,
    pub cursor_normal: nk_style_item,
    pub cursor_hover: nk_style_item,
    pub cursor_active: nk_style_item,
    pub border: f32,
    pub rounding: f32,
    pub bar_height: f32,
    pub padding: nk_vec2,
    pub spacing: nk_vec2,
    pub cursor_size: nk_vec2,
    pub show_buttons: ::std::os::raw::c_int,
    pub inc_button: nk_style_button,
    pub dec_button: nk_style_button,
    pub inc_symbol: nk_symbol_type,
    pub dec_symbol: nk_symbol_type,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::default::Default for nk_style_slider {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_progress {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub cursor_normal: nk_style_item,
    pub cursor_hover: nk_style_item,
    pub cursor_active: nk_style_item,
    pub cursor_border_color: nk_color,
    pub rounding: f32,
    pub border: f32,
    pub cursor_border: f32,
    pub cursor_rounding: f32,
    pub padding: nk_vec2,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::default::Default for nk_style_progress {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_scrollbar {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub cursor_normal: nk_style_item,
    pub cursor_hover: nk_style_item,
    pub cursor_active: nk_style_item,
    pub cursor_border_color: nk_color,
    pub border: f32,
    pub rounding: f32,
    pub border_cursor: f32,
    pub rounding_cursor: f32,
    pub padding: nk_vec2,
    pub show_buttons: ::std::os::raw::c_int,
    pub inc_button: nk_style_button,
    pub dec_button: nk_style_button,
    pub inc_symbol: nk_symbol_type,
    pub dec_symbol: nk_symbol_type,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::default::Default for nk_style_scrollbar {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_edit {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub scrollbar: nk_style_scrollbar,
    pub cursor_normal: nk_color,
    pub cursor_hover: nk_color,
    pub cursor_text_normal: nk_color,
    pub cursor_text_hover: nk_color,
    pub text_normal: nk_color,
    pub text_hover: nk_color,
    pub text_active: nk_color,
    pub selected_normal: nk_color,
    pub selected_hover: nk_color,
    pub selected_text_normal: nk_color,
    pub selected_text_hover: nk_color,
    pub border: f32,
    pub rounding: f32,
    pub cursor_size: f32,
    pub scrollbar_size: nk_vec2,
    pub padding: nk_vec2,
    pub row_padding: f32,
}
impl ::std::default::Default for nk_style_edit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_property {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub label_normal: nk_color,
    pub label_hover: nk_color,
    pub label_active: nk_color,
    pub sym_left: nk_symbol_type,
    pub sym_right: nk_symbol_type,
    pub border: f32,
    pub rounding: f32,
    pub padding: nk_vec2,
    pub edit: nk_style_edit,
    pub inc_button: nk_style_button,
    pub dec_button: nk_style_button,
    pub userdata: nk_handle,
    pub draw_begin: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   *mut nk_command_buffer,
                                                               arg2:
                                                                   nk_handle)>,
    pub draw_end: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut nk_command_buffer,
                                                             arg2:
                                                                 nk_handle)>,
}
impl ::std::default::Default for nk_style_property {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_chart {
    pub background: nk_style_item,
    pub border_color: nk_color,
    pub selected_color: nk_color,
    pub color: nk_color,
    pub border: f32,
    pub rounding: f32,
    pub padding: nk_vec2,
}
impl ::std::default::Default for nk_style_chart {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_combo {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub border_color: nk_color,
    pub label_normal: nk_color,
    pub label_hover: nk_color,
    pub label_active: nk_color,
    pub symbol_normal: nk_color,
    pub symbol_hover: nk_color,
    pub symbol_active: nk_color,
    pub button: nk_style_button,
    pub sym_normal: nk_symbol_type,
    pub sym_hover: nk_symbol_type,
    pub sym_active: nk_symbol_type,
    pub border: f32,
    pub rounding: f32,
    pub content_padding: nk_vec2,
    pub button_padding: nk_vec2,
    pub spacing: nk_vec2,
}
impl ::std::default::Default for nk_style_combo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_tab {
    pub background: nk_style_item,
    pub border_color: nk_color,
    pub text: nk_color,
    pub tab_maximize_button: nk_style_button,
    pub tab_minimize_button: nk_style_button,
    pub node_maximize_button: nk_style_button,
    pub node_minimize_button: nk_style_button,
    pub sym_minimize: nk_symbol_type,
    pub sym_maximize: nk_symbol_type,
    pub border: f32,
    pub rounding: f32,
    pub indent: f32,
    pub padding: nk_vec2,
    pub spacing: nk_vec2,
}
impl ::std::default::Default for nk_style_tab {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_style_header_align { NK_HEADER_LEFT = 0, NK_HEADER_RIGHT = 1, }
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_window_header {
    pub normal: nk_style_item,
    pub hover: nk_style_item,
    pub active: nk_style_item,
    pub close_button: nk_style_button,
    pub minimize_button: nk_style_button,
    pub close_symbol: nk_symbol_type,
    pub minimize_symbol: nk_symbol_type,
    pub maximize_symbol: nk_symbol_type,
    pub label_normal: nk_color,
    pub label_hover: nk_color,
    pub label_active: nk_color,
    pub align: nk_style_header_align,
    pub padding: nk_vec2,
    pub label_padding: nk_vec2,
    pub spacing: nk_vec2,
}
impl ::std::default::Default for nk_style_window_header {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style_window {
    pub header: nk_style_window_header,
    pub fixed_background: nk_style_item,
    pub background: nk_color,
    pub border_color: nk_color,
    pub popup_border_color: nk_color,
    pub combo_border_color: nk_color,
    pub contextual_border_color: nk_color,
    pub menu_border_color: nk_color,
    pub group_border_color: nk_color,
    pub tooltip_border_color: nk_color,
    pub scaler: nk_style_item,
    pub border: f32,
    pub combo_border: f32,
    pub contextual_border: f32,
    pub menu_border: f32,
    pub group_border: f32,
    pub tooltip_border: f32,
    pub popup_border: f32,
    pub rounding: f32,
    pub spacing: nk_vec2,
    pub scrollbar_size: nk_vec2,
    pub min_size: nk_vec2,
    pub padding: nk_vec2,
    pub group_padding: nk_vec2,
    pub popup_padding: nk_vec2,
    pub combo_padding: nk_vec2,
    pub contextual_padding: nk_vec2,
    pub menu_padding: nk_vec2,
    pub tooltip_padding: nk_vec2,
}
impl ::std::default::Default for nk_style_window {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_style {
    pub font: *const nk_user_font,
    pub cursors: [*const nk_cursor; 7usize],
    pub cursor_active: *const nk_cursor,
    pub cursor_last: *mut nk_cursor,
    pub cursor_visible: ::std::os::raw::c_int,
    pub text: nk_style_text,
    pub button: nk_style_button,
    pub contextual_button: nk_style_button,
    pub menu_button: nk_style_button,
    pub option: nk_style_toggle,
    pub checkbox: nk_style_toggle,
    pub selectable: nk_style_selectable,
    pub slider: nk_style_slider,
    pub progress: nk_style_progress,
    pub property: nk_style_property,
    pub edit: nk_style_edit,
    pub chart: nk_style_chart,
    pub scrollh: nk_style_scrollbar,
    pub scrollv: nk_style_scrollbar,
    pub tab: nk_style_tab,
    pub combo: nk_style_combo,
    pub window: nk_style_window,
}
impl ::std::default::Default for nk_style {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_panel_type {
    NK_PANEL_WINDOW = 1,
    NK_PANEL_GROUP = 2,
    NK_PANEL_POPUP = 4,
    NK_PANEL_CONTEXTUAL = 16,
    NK_PANEL_COMBO = 32,
    NK_PANEL_MENU = 64,
    NK_PANEL_TOOLTIP = 128,
}
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_panel_set {
    NK_PANEL_SET_NONBLOCK = 240,
    NK_PANEL_SET_POPUP = 244,
    NK_PANEL_SET_SUB = 246,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_chart_slot {
    pub type_: nk_chart_type,
    pub color: nk_color,
    pub highlight: nk_color,
    pub min: f32,
    pub max: f32,
    pub range: f32,
    pub count: ::std::os::raw::c_int,
    pub last: nk_vec2,
    pub index: ::std::os::raw::c_int,
}
impl ::std::default::Default for nk_chart_slot {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_chart {
    pub slots: [nk_chart_slot; 4usize],
    pub slot: ::std::os::raw::c_int,
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
}
impl ::std::default::Default for nk_chart {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_row_layout {
    pub type_: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_int,
    pub height: f32,
    pub columns: ::std::os::raw::c_int,
    pub ratio: *const f32,
    pub item_width: f32,
    pub item_height: f32,
    pub item_offset: f32,
    pub filled: f32,
    pub item: nk_rect,
    pub tree_depth: ::std::os::raw::c_int,
}
impl ::std::default::Default for nk_row_layout {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_popup_buffer {
    pub begin: nk_size,
    pub parent: nk_size,
    pub last: nk_size,
    pub end: nk_size,
    pub active: ::std::os::raw::c_int,
}
impl ::std::default::Default for nk_popup_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_menu_state {
    pub x: f32,
    pub y: f32,
    pub w: f32,
    pub h: f32,
    pub offset: nk_scroll,
}
impl ::std::default::Default for nk_menu_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_panel {
    pub type_: nk_panel_type,
    pub flags: nk_flags,
    pub bounds: nk_rect,
    pub offset: *mut nk_scroll,
    pub at_x: f32,
    pub at_y: f32,
    pub max_x: f32,
    pub footer_height: f32,
    pub header_height: f32,
    pub border: f32,
    pub has_scrolling: ::std::os::raw::c_uint,
    pub clip: nk_rect,
    pub menu: nk_menu_state,
    pub row: nk_row_layout,
    pub chart: nk_chart,
    pub popup_buffer: nk_popup_buffer,
    pub buffer: *mut nk_command_buffer,
    pub parent: *mut nk_panel,
}
impl ::std::default::Default for nk_panel {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub const NK_WINDOW_DYNAMIC: nk_window_flags =
    nk_window_flags::NK_WINDOW_PRIVATE;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum nk_window_flags {
    NK_WINDOW_PRIVATE = 1024,
    NK_WINDOW_ROM = 2048,
    NK_WINDOW_HIDDEN = 4096,
    NK_WINDOW_CLOSED = 8192,
    NK_WINDOW_MINIMIZED = 16384,
    NK_WINDOW_REMOVE_ROM = 32768,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_popup_state {
    pub win: *mut nk_window,
    pub type_: nk_panel_type,
    pub name: nk_hash,
    pub active: ::std::os::raw::c_int,
    pub combo_count: ::std::os::raw::c_uint,
    pub con_count: ::std::os::raw::c_uint,
    pub con_old: ::std::os::raw::c_uint,
    pub active_con: ::std::os::raw::c_uint,
    pub header: nk_rect,
}
impl ::std::default::Default for nk_popup_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_edit_state {
    pub name: nk_hash,
    pub seq: ::std::os::raw::c_uint,
    pub old: ::std::os::raw::c_uint,
    pub active: ::std::os::raw::c_int,
    pub prev: ::std::os::raw::c_int,
    pub cursor: ::std::os::raw::c_int,
    pub sel_start: ::std::os::raw::c_int,
    pub sel_end: ::std::os::raw::c_int,
    pub scrollbar: nk_scroll,
    pub mode: ::std::os::raw::c_uchar,
    pub single_line: ::std::os::raw::c_uchar,
}
impl ::std::default::Default for nk_edit_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_property_state {
    pub active: ::std::os::raw::c_int,
    pub prev: ::std::os::raw::c_int,
    pub buffer: [::std::os::raw::c_char; 64usize],
    pub length: ::std::os::raw::c_int,
    pub cursor: ::std::os::raw::c_int,
    pub name: nk_hash,
    pub seq: ::std::os::raw::c_uint,
    pub old: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_int,
}
impl ::std::clone::Clone for nk_property_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_property_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_window {
    pub seq: ::std::os::raw::c_uint,
    pub name: nk_hash,
    pub name_string: [::std::os::raw::c_char; 64usize],
    pub flags: nk_flags,
    pub bounds: nk_rect,
    pub scrollbar: nk_scroll,
    pub buffer: nk_command_buffer,
    pub layout: *mut nk_panel,
    pub scrollbar_hiding_timer: f32,
    pub property: nk_property_state,
    pub popup: nk_popup_state,
    pub edit: nk_edit_state,
    pub scrolled: ::std::os::raw::c_uint,
    pub tables: *mut nk_table,
    pub table_count: ::std::os::raw::c_ushort,
    pub table_size: ::std::os::raw::c_ushort,
    pub next: *mut nk_window,
    pub prev: *mut nk_window,
    pub parent: *mut nk_window,
}
impl ::std::clone::Clone for nk_window {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_window {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_style_item_element {
    pub address: *mut nk_style_item,
    pub old_value: nk_style_item,
}
impl ::std::default::Default for nk_config_stack_style_item_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_float_element {
    pub address: *mut f32,
    pub old_value: f32,
}
impl ::std::default::Default for nk_config_stack_float_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_vec2_element {
    pub address: *mut nk_vec2,
    pub old_value: nk_vec2,
}
impl ::std::default::Default for nk_config_stack_vec2_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_flags_element {
    pub address: *mut nk_flags,
    pub old_value: nk_flags,
}
impl ::std::default::Default for nk_config_stack_flags_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_color_element {
    pub address: *mut nk_color,
    pub old_value: nk_color,
}
impl ::std::default::Default for nk_config_stack_color_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_user_font_element {
    pub address: *mut *const nk_user_font,
    pub old_value: *const nk_user_font,
}
impl ::std::default::Default for nk_config_stack_user_font_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_button_behavior_element {
    pub address: *mut nk_button_behavior,
    pub old_value: nk_button_behavior,
}
impl ::std::default::Default for nk_config_stack_button_behavior_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_style_item {
    pub head: ::std::os::raw::c_int,
    pub elements: [nk_config_stack_style_item_element; 16usize],
}
impl ::std::default::Default for nk_config_stack_style_item {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_float {
    pub head: ::std::os::raw::c_int,
    pub elements: [nk_config_stack_float_element; 32usize],
}
impl ::std::default::Default for nk_config_stack_float {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_vec2 {
    pub head: ::std::os::raw::c_int,
    pub elements: [nk_config_stack_vec2_element; 16usize],
}
impl ::std::default::Default for nk_config_stack_vec2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_flags {
    pub head: ::std::os::raw::c_int,
    pub elements: [nk_config_stack_flags_element; 32usize],
}
impl ::std::default::Default for nk_config_stack_flags {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_color {
    pub head: ::std::os::raw::c_int,
    pub elements: [nk_config_stack_color_element; 32usize],
}
impl ::std::default::Default for nk_config_stack_color {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_user_font {
    pub head: ::std::os::raw::c_int,
    pub elements: [nk_config_stack_user_font_element; 8usize],
}
impl ::std::default::Default for nk_config_stack_user_font {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_config_stack_button_behavior {
    pub head: ::std::os::raw::c_int,
    pub elements: [nk_config_stack_button_behavior_element; 8usize],
}
impl ::std::default::Default for nk_config_stack_button_behavior {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_configuration_stacks {
    pub style_items: nk_config_stack_style_item,
    pub floats: nk_config_stack_float,
    pub vectors: nk_config_stack_vec2,
    pub flags: nk_config_stack_flags,
    pub colors: nk_config_stack_color,
    pub fonts: nk_config_stack_user_font,
    pub button_behaviors: nk_config_stack_button_behavior,
}
impl ::std::default::Default for nk_configuration_stacks {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_table {
    pub seq: ::std::os::raw::c_uint,
    pub keys: [nk_hash; 52usize],
    pub values: [nk_uint; 52usize],
    pub next: *mut nk_table,
    pub prev: *mut nk_table,
}
impl ::std::clone::Clone for nk_table {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_table {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_page_data {
    pub _bindgen_data_: [u64; 55usize],
}
impl nk_page_data {
    pub unsafe fn tbl(&mut self) -> *mut nk_table {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn win(&mut self) -> *mut nk_window {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for nk_page_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_page_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_page_element {
    pub data: nk_page_data,
    pub next: *mut nk_page_element,
    pub prev: *mut nk_page_element,
}
impl ::std::clone::Clone for nk_page_element {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_page_element {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
//#[derive(Debug)]
pub struct nk_page {
    pub size: ::std::os::raw::c_uint,
    pub next: *mut nk_page,
    pub win: [nk_page_element; 1usize],
}
impl ::std::default::Default for nk_page {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nk_pool {
    pub alloc: nk_allocator,
    pub type_: nk_allocation_type,
    pub page_count: ::std::os::raw::c_uint,
    pub pages: *mut nk_page,
    pub freelist: *mut nk_page_element,
    pub capacity: ::std::os::raw::c_uint,
    pub size: nk_size,
    pub cap: nk_size,
}
impl ::std::default::Default for nk_pool {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct nk_context {
    pub input: nk_input,
    pub style: nk_style,
    pub memory: nk_buffer,
    pub clip: nk_clipboard,
    pub last_widget_state: nk_flags,
    pub delta_time_seconds: f32,
    pub button_behavior: nk_button_behavior,
    pub stacks: nk_configuration_stacks,
    pub draw_list: nk_draw_list,
    pub userdata: nk_handle,
    pub text_edit: nk_text_edit,
    pub overlay: nk_command_buffer,
    pub build: ::std::os::raw::c_int,
    pub use_pool: ::std::os::raw::c_int,
    pub pool: nk_pool,
    pub begin: *mut nk_window,
    pub end: *mut nk_window,
    pub active: *mut nk_window,
    pub current: *mut nk_window,
    pub freelist: *mut nk_page_element,
    pub count: ::std::os::raw::c_uint,
    pub seq: ::std::os::raw::c_uint,
}
impl ::std::clone::Clone for nk_context {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for nk_context {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub fn nk_init_fixed(arg1: *mut nk_context,
                         memory: *mut ::std::os::raw::c_void, size: nk_size,
                         arg2: *const nk_user_font) -> ::std::os::raw::c_int;
    pub fn nk_init_custom(arg1: *mut nk_context, cmds: *mut nk_buffer,
                          pool: *mut nk_buffer, arg2: *const nk_user_font)
     -> ::std::os::raw::c_int;
    pub fn nk_init(arg1: *mut nk_context, arg2: *mut nk_allocator,
                   arg3: *const nk_user_font) -> ::std::os::raw::c_int;
    pub fn nk_clear(arg1: *mut nk_context);
    pub fn nk_free(arg1: *mut nk_context);
    pub fn nk_set_user_data(arg1: *mut nk_context, handle: nk_handle);
    pub fn nk_begin(arg1: *mut nk_context, arg2: *mut nk_panel,
                    title: *const ::std::os::raw::c_char, bounds: nk_rect,
                    flags: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_begin_titled(arg1: *mut nk_context, arg2: *mut nk_panel,
                           name: *const ::std::os::raw::c_char,
                           title: *const ::std::os::raw::c_char,
                           bounds: nk_rect, flags: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_end(arg1: *mut nk_context);
    pub fn nk_window_find(ctx: *mut nk_context,
                          name: *const ::std::os::raw::c_char)
     -> *mut nk_window;
    pub fn nk_window_get_bounds(arg1: *const nk_context) -> nk_rect;
    pub fn nk_window_get_position(arg1: *const nk_context) -> nk_vec2;
    pub fn nk_window_get_size(arg1: *const nk_context) -> nk_vec2;
    pub fn nk_window_get_width(arg1: *const nk_context) -> f32;
    pub fn nk_window_get_height(arg1: *const nk_context) -> f32;
    pub fn nk_window_get_panel(arg1: *mut nk_context) -> *mut nk_panel;
    pub fn nk_window_get_content_region(arg1: *mut nk_context) -> nk_rect;
    pub fn nk_window_get_content_region_min(arg1: *mut nk_context) -> nk_vec2;
    pub fn nk_window_get_content_region_max(arg1: *mut nk_context) -> nk_vec2;
    pub fn nk_window_get_content_region_size(arg1: *mut nk_context)
     -> nk_vec2;
    pub fn nk_window_get_canvas(arg1: *mut nk_context)
     -> *mut nk_command_buffer;
    pub fn nk_window_has_focus(arg1: *const nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_collapsed(arg1: *mut nk_context,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_closed(arg1: *mut nk_context,
                               arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_hidden(arg1: *mut nk_context,
                               arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_active(arg1: *mut nk_context,
                               arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_hovered(arg1: *mut nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_window_is_any_hovered(arg1: *mut nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_item_is_any_active(arg1: *mut nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_window_set_bounds(arg1: *mut nk_context, arg2: nk_rect);
    pub fn nk_window_set_position(arg1: *mut nk_context, arg2: nk_vec2);
    pub fn nk_window_set_size(arg1: *mut nk_context, arg2: nk_vec2);
    pub fn nk_window_set_focus(arg1: *mut nk_context,
                               name: *const ::std::os::raw::c_char);
    pub fn nk_window_close(ctx: *mut nk_context,
                           name: *const ::std::os::raw::c_char);
    pub fn nk_window_collapse(arg1: *mut nk_context,
                              name: *const ::std::os::raw::c_char,
                              arg2: nk_collapse_states);
    pub fn nk_window_collapse_if(arg1: *mut nk_context,
                                 name: *const ::std::os::raw::c_char,
                                 arg2: nk_collapse_states,
                                 cond: ::std::os::raw::c_int);
    pub fn nk_window_show(arg1: *mut nk_context,
                          name: *const ::std::os::raw::c_char,
                          arg2: nk_show_states);
    pub fn nk_window_show_if(arg1: *mut nk_context,
                             name: *const ::std::os::raw::c_char,
                             arg2: nk_show_states,
                             cond: ::std::os::raw::c_int);
    pub fn nk_layout_row_dynamic(arg1: *mut nk_context, height: f32,
                                 cols: ::std::os::raw::c_int);
    pub fn nk_layout_row_static(arg1: *mut nk_context, height: f32,
                                item_width: ::std::os::raw::c_int,
                                cols: ::std::os::raw::c_int);
    pub fn nk_layout_row_begin(arg1: *mut nk_context, arg2: nk_layout_format,
                               row_height: f32, cols: ::std::os::raw::c_int);
    pub fn nk_layout_row_push(arg1: *mut nk_context, value: f32);
    pub fn nk_layout_row_end(arg1: *mut nk_context);
    pub fn nk_layout_row(arg1: *mut nk_context, arg2: nk_layout_format,
                         height: f32, cols: ::std::os::raw::c_int,
                         ratio: *const f32);
    pub fn nk_layout_space_begin(arg1: *mut nk_context,
                                 arg2: nk_layout_format, height: f32,
                                 widget_count: ::std::os::raw::c_int);
    pub fn nk_layout_space_push(arg1: *mut nk_context, arg2: nk_rect);
    pub fn nk_layout_space_end(arg1: *mut nk_context);
    pub fn nk_layout_space_bounds(arg1: *mut nk_context) -> nk_rect;
    pub fn nk_layout_space_to_screen(arg1: *mut nk_context, arg2: nk_vec2)
     -> nk_vec2;
    pub fn nk_layout_space_to_local(arg1: *mut nk_context, arg2: nk_vec2)
     -> nk_vec2;
    pub fn nk_layout_space_rect_to_screen(arg1: *mut nk_context,
                                          arg2: nk_rect) -> nk_rect;
    pub fn nk_layout_space_rect_to_local(arg1: *mut nk_context, arg2: nk_rect)
     -> nk_rect;
    pub fn nk_layout_ratio_from_pixel(arg1: *mut nk_context, pixel_width: f32)
     -> f32;
    pub fn nk_layout_pixel_from_ratio(arg1: *mut nk_context, ratio: f32)
     -> f32;
    pub fn nk_group_begin(arg1: *mut nk_context, arg2: *mut nk_panel,
                          title: *const ::std::os::raw::c_char,
                          arg3: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_group_end(arg1: *mut nk_context);
    pub fn nk_tree_push_hashed(arg1: *mut nk_context, arg2: nk_tree_type,
                               title: *const ::std::os::raw::c_char,
                               initial_state: nk_collapse_states,
                               hash: *const ::std::os::raw::c_char,
                               len: ::std::os::raw::c_int,
                               seed: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_tree_image_push_hashed(arg1: *mut nk_context,
                                     arg2: nk_tree_type, arg3: nk_image,
                                     title: *const ::std::os::raw::c_char,
                                     initial_state: nk_collapse_states,
                                     hash: *const ::std::os::raw::c_char,
                                     len: ::std::os::raw::c_int,
                                     seed: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_tree_pop(arg1: *mut nk_context);
    pub fn nk_text(arg1: *mut nk_context, arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: nk_flags);
    pub fn nk_text_colored(arg1: *mut nk_context,
                           arg2: *const ::std::os::raw::c_char,
                           arg3: ::std::os::raw::c_int, arg4: nk_flags,
                           arg5: nk_color);
    pub fn nk_text_wrap(arg1: *mut nk_context,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int);
    pub fn nk_text_wrap_colored(arg1: *mut nk_context,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: ::std::os::raw::c_int, arg4: nk_color);
    pub fn nk_label(arg1: *mut nk_context,
                    arg2: *const ::std::os::raw::c_char, align: nk_flags);
    pub fn nk_label_colored(arg1: *mut nk_context,
                            arg2: *const ::std::os::raw::c_char,
                            align: nk_flags, arg3: nk_color);
    pub fn nk_label_wrap(arg1: *mut nk_context,
                         arg2: *const ::std::os::raw::c_char);
    pub fn nk_label_colored_wrap(arg1: *mut nk_context,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: nk_color);
    pub fn nk_image(arg1: *mut nk_context, arg2: nk_image);
    pub fn nk_button_text(arg1: *mut nk_context,
                          title: *const ::std::os::raw::c_char,
                          len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_button_label(arg1: *mut nk_context,
                           title: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_button_color(arg1: *mut nk_context, arg2: nk_color)
     -> ::std::os::raw::c_int;
    pub fn nk_button_symbol(arg1: *mut nk_context, arg2: nk_symbol_type)
     -> ::std::os::raw::c_int;
    pub fn nk_button_image(arg1: *mut nk_context, img: nk_image)
     -> ::std::os::raw::c_int;
    pub fn nk_button_symbol_label(arg1: *mut nk_context, arg2: nk_symbol_type,
                                  arg3: *const ::std::os::raw::c_char,
                                  text_alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_button_symbol_text(arg1: *mut nk_context, arg2: nk_symbol_type,
                                 arg3: *const ::std::os::raw::c_char,
                                 arg4: ::std::os::raw::c_int,
                                 alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_button_image_label(arg1: *mut nk_context, img: nk_image,
                                 arg2: *const ::std::os::raw::c_char,
                                 text_alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_button_image_text(arg1: *mut nk_context, img: nk_image,
                                arg2: *const ::std::os::raw::c_char,
                                arg3: ::std::os::raw::c_int,
                                alignment: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_button_set_behavior(arg1: *mut nk_context,
                                  arg2: nk_button_behavior);
    pub fn nk_button_push_behavior(arg1: *mut nk_context,
                                   arg2: nk_button_behavior)
     -> ::std::os::raw::c_int;
    pub fn nk_button_pop_behavior(arg1: *mut nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_check_label(arg1: *mut nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_check_text(arg1: *mut nk_context,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int,
                         active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_check_flags_label(arg1: *mut nk_context,
                                arg2: *const ::std::os::raw::c_char,
                                flags: ::std::os::raw::c_uint,
                                value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn nk_check_flags_text(arg1: *mut nk_context,
                               arg2: *const ::std::os::raw::c_char,
                               arg3: ::std::os::raw::c_int,
                               flags: ::std::os::raw::c_uint,
                               value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
    pub fn nk_checkbox_label(arg1: *mut nk_context,
                             arg2: *const ::std::os::raw::c_char,
                             active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_checkbox_text(arg1: *mut nk_context,
                            arg2: *const ::std::os::raw::c_char,
                            arg3: ::std::os::raw::c_int,
                            active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_checkbox_flags_label(arg1: *mut nk_context,
                                   arg2: *const ::std::os::raw::c_char,
                                   flags: *mut ::std::os::raw::c_uint,
                                   value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn nk_checkbox_flags_text(arg1: *mut nk_context,
                                  arg2: *const ::std::os::raw::c_char,
                                  arg3: ::std::os::raw::c_int,
                                  flags: *mut ::std::os::raw::c_uint,
                                  value: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
    pub fn nk_radio_label(arg1: *mut nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_radio_text(arg1: *mut nk_context,
                         arg2: *const ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int,
                         active: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_option_label(arg1: *mut nk_context,
                           arg2: *const ::std::os::raw::c_char,
                           active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_option_text(arg1: *mut nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: ::std::os::raw::c_int,
                          active: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_selectable_label(arg1: *mut nk_context,
                               arg2: *const ::std::os::raw::c_char,
                               align: nk_flags,
                               value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_selectable_text(arg1: *mut nk_context,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: ::std::os::raw::c_int, align: nk_flags,
                              value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_selectable_image_label(arg1: *mut nk_context, arg2: nk_image,
                                     arg3: *const ::std::os::raw::c_char,
                                     align: nk_flags,
                                     value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_selectable_image_text(arg1: *mut nk_context, arg2: nk_image,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: ::std::os::raw::c_int,
                                    align: nk_flags,
                                    value: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_select_label(arg1: *mut nk_context,
                           arg2: *const ::std::os::raw::c_char,
                           align: nk_flags, value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_select_text(arg1: *mut nk_context,
                          arg2: *const ::std::os::raw::c_char,
                          arg3: ::std::os::raw::c_int, align: nk_flags,
                          value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_select_image_label(arg1: *mut nk_context, arg2: nk_image,
                                 arg3: *const ::std::os::raw::c_char,
                                 align: nk_flags,
                                 value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_select_image_text(arg1: *mut nk_context, arg2: nk_image,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: ::std::os::raw::c_int, align: nk_flags,
                                value: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_slide_float(arg1: *mut nk_context, min: f32, val: f32, max: f32,
                          step: f32) -> f32;
    pub fn nk_slide_int(arg1: *mut nk_context, min: ::std::os::raw::c_int,
                        val: ::std::os::raw::c_int,
                        max: ::std::os::raw::c_int,
                        step: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nk_slider_float(arg1: *mut nk_context, min: f32, val: *mut f32,
                           max: f32, step: f32) -> ::std::os::raw::c_int;
    pub fn nk_slider_int(arg1: *mut nk_context, min: ::std::os::raw::c_int,
                         val: *mut ::std::os::raw::c_int,
                         max: ::std::os::raw::c_int,
                         step: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_progress(arg1: *mut nk_context, cur: *mut nk_size, max: nk_size,
                       modifyable: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_prog(arg1: *mut nk_context, cur: nk_size, max: nk_size,
                   modifyable: ::std::os::raw::c_int) -> nk_size;
    pub fn nk_color_picker(arg1: *mut nk_context, arg2: nk_color,
                           arg3: nk_color_format) -> nk_color;
    pub fn nk_color_pick(arg1: *mut nk_context, arg2: *mut nk_color,
                         arg3: nk_color_format) -> ::std::os::raw::c_int;
    pub fn nk_property_int(arg1: *mut nk_context,
                           name: *const ::std::os::raw::c_char,
                           min: ::std::os::raw::c_int,
                           val: *mut ::std::os::raw::c_int,
                           max: ::std::os::raw::c_int,
                           step: ::std::os::raw::c_int, inc_per_pixel: f32);
    pub fn nk_property_float(arg1: *mut nk_context,
                             name: *const ::std::os::raw::c_char, min: f32,
                             val: *mut f32, max: f32, step: f32,
                             inc_per_pixel: f32);
    pub fn nk_property_double(arg1: *mut nk_context,
                              name: *const ::std::os::raw::c_char, min: f64,
                              val: *mut f64, max: f64, step: f64,
                              inc_per_pixel: f32);
    pub fn nk_propertyi(arg1: *mut nk_context,
                        name: *const ::std::os::raw::c_char,
                        min: ::std::os::raw::c_int,
                        val: ::std::os::raw::c_int,
                        max: ::std::os::raw::c_int,
                        step: ::std::os::raw::c_int, inc_per_pixel: f32)
     -> ::std::os::raw::c_int;
    pub fn nk_propertyf(arg1: *mut nk_context,
                        name: *const ::std::os::raw::c_char, min: f32,
                        val: f32, max: f32, step: f32, inc_per_pixel: f32)
     -> f32;
    pub fn nk_propertyd(arg1: *mut nk_context,
                        name: *const ::std::os::raw::c_char, min: f64,
                        val: f64, max: f64, step: f64, inc_per_pixel: f32)
     -> f64;
    pub fn nk_edit_string(arg1: *mut nk_context, arg2: nk_flags,
                          buffer: *mut ::std::os::raw::c_char,
                          len: *mut ::std::os::raw::c_int,
                          max: ::std::os::raw::c_int, arg3: nk_plugin_filter)
     -> nk_flags;
    pub fn nk_edit_buffer(arg1: *mut nk_context, arg2: nk_flags,
                          arg3: *mut nk_text_edit, arg4: nk_plugin_filter)
     -> nk_flags;
    pub fn nk_edit_string_zero_terminated(arg1: *mut nk_context,
                                          arg2: nk_flags,
                                          buffer: *mut ::std::os::raw::c_char,
                                          max: ::std::os::raw::c_int,
                                          arg3: nk_plugin_filter) -> nk_flags;
    pub fn nk_chart_begin(arg1: *mut nk_context, arg2: nk_chart_type,
                          num: ::std::os::raw::c_int, min: f32, max: f32)
     -> ::std::os::raw::c_int;
    pub fn nk_chart_begin_colored(arg1: *mut nk_context, arg2: nk_chart_type,
                                  arg3: nk_color, active: nk_color,
                                  num: ::std::os::raw::c_int, min: f32,
                                  max: f32) -> ::std::os::raw::c_int;
    pub fn nk_chart_add_slot(ctx: *mut nk_context, arg1: nk_chart_type,
                             count: ::std::os::raw::c_int, min_value: f32,
                             max_value: f32);
    pub fn nk_chart_add_slot_colored(ctx: *mut nk_context,
                                     arg1: nk_chart_type, arg2: nk_color,
                                     active: nk_color,
                                     count: ::std::os::raw::c_int,
                                     min_value: f32, max_value: f32);
    pub fn nk_chart_push(arg1: *mut nk_context, arg2: f32) -> nk_flags;
    pub fn nk_chart_push_slot(arg1: *mut nk_context, arg2: f32,
                              arg3: ::std::os::raw::c_int) -> nk_flags;
    pub fn nk_chart_end(arg1: *mut nk_context);
    pub fn nk_plot(arg1: *mut nk_context, arg2: nk_chart_type,
                   values: *const f32, count: ::std::os::raw::c_int,
                   offset: ::std::os::raw::c_int);
    pub fn nk_plot_function(arg1: *mut nk_context, arg2: nk_chart_type,
                            userdata: *mut ::std::os::raw::c_void,
                            value_getter:
                                ::std::option::Option<unsafe extern "C" fn(user:
                                                                               *mut ::std::os::raw::c_void,
                                                                           index:
                                                                               ::std::os::raw::c_int)
                                                          -> f32>,
                            count: ::std::os::raw::c_int,
                            offset: ::std::os::raw::c_int);
    pub fn nk_popup_begin(arg1: *mut nk_context, arg2: *mut nk_panel,
                          arg3: nk_popup_type,
                          arg4: *const ::std::os::raw::c_char, arg5: nk_flags,
                          bounds: nk_rect) -> ::std::os::raw::c_int;
    pub fn nk_popup_close(arg1: *mut nk_context);
    pub fn nk_popup_end(arg1: *mut nk_context);
    pub fn nk_combo(arg1: *mut nk_context,
                    items: *mut *const ::std::os::raw::c_char,
                    count: ::std::os::raw::c_int,
                    selected: ::std::os::raw::c_int,
                    item_height: ::std::os::raw::c_int, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_separator(arg1: *mut nk_context,
                              items_separated_by_separator:
                                  *const ::std::os::raw::c_char,
                              separator: ::std::os::raw::c_int,
                              selected: ::std::os::raw::c_int,
                              count: ::std::os::raw::c_int,
                              item_height: ::std::os::raw::c_int,
                              size: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_combo_string(arg1: *mut nk_context,
                           items_separated_by_zeros:
                               *const ::std::os::raw::c_char,
                           selected: ::std::os::raw::c_int,
                           count: ::std::os::raw::c_int,
                           item_height: ::std::os::raw::c_int, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_callback(arg1: *mut nk_context,
                             item_getter:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                *mut ::std::os::raw::c_void,
                                                                            arg2:
                                                                                ::std::os::raw::c_int,
                                                                            arg3:
                                                                                *mut *const ::std::os::raw::c_char)>,
                             userdata: *mut ::std::os::raw::c_void,
                             selected: ::std::os::raw::c_int,
                             count: ::std::os::raw::c_int,
                             item_height: ::std::os::raw::c_int,
                             size: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_combobox(arg1: *mut nk_context,
                       items: *mut *const ::std::os::raw::c_char,
                       count: ::std::os::raw::c_int,
                       selected: *mut ::std::os::raw::c_int,
                       item_height: ::std::os::raw::c_int, size: nk_vec2);
    pub fn nk_combobox_string(arg1: *mut nk_context,
                              items_separated_by_zeros:
                                  *const ::std::os::raw::c_char,
                              selected: *mut ::std::os::raw::c_int,
                              count: ::std::os::raw::c_int,
                              item_height: ::std::os::raw::c_int,
                              size: nk_vec2);
    pub fn nk_combobox_separator(arg1: *mut nk_context,
                                 items_separated_by_separator:
                                     *const ::std::os::raw::c_char,
                                 separator: ::std::os::raw::c_int,
                                 selected: *mut ::std::os::raw::c_int,
                                 count: ::std::os::raw::c_int,
                                 item_height: ::std::os::raw::c_int,
                                 size: nk_vec2);
    pub fn nk_combobox_callback(arg1: *mut nk_context,
                                item_getter:
                                    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                   *mut ::std::os::raw::c_void,
                                                                               arg2:
                                                                                   ::std::os::raw::c_int,
                                                                               arg3:
                                                                                   *mut *const ::std::os::raw::c_char)>,
                                arg2: *mut ::std::os::raw::c_void,
                                selected: *mut ::std::os::raw::c_int,
                                count: ::std::os::raw::c_int,
                                item_height: ::std::os::raw::c_int,
                                size: nk_vec2);
    pub fn nk_combo_begin_text(arg1: *mut nk_context, arg2: *mut nk_panel,
                               selected: *const ::std::os::raw::c_char,
                               arg3: ::std::os::raw::c_int, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_label(arg1: *mut nk_context, arg2: *mut nk_panel,
                                selected: *const ::std::os::raw::c_char,
                                size: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_color(arg1: *mut nk_context, arg2: *mut nk_panel,
                                color: nk_color, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_symbol(arg1: *mut nk_context, arg2: *mut nk_panel,
                                 arg3: nk_symbol_type, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_symbol_label(arg1: *mut nk_context,
                                       arg2: *mut nk_panel,
                                       selected:
                                           *const ::std::os::raw::c_char,
                                       arg3: nk_symbol_type, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_symbol_text(arg1: *mut nk_context,
                                      arg2: *mut nk_panel,
                                      selected: *const ::std::os::raw::c_char,
                                      arg3: ::std::os::raw::c_int,
                                      arg4: nk_symbol_type, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_image(arg1: *mut nk_context, arg2: *mut nk_panel,
                                img: nk_image, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_image_label(arg1: *mut nk_context,
                                      arg2: *mut nk_panel,
                                      selected: *const ::std::os::raw::c_char,
                                      arg3: nk_image, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_begin_image_text(arg1: *mut nk_context,
                                     arg2: *mut nk_panel,
                                     selected: *const ::std::os::raw::c_char,
                                     arg3: ::std::os::raw::c_int,
                                     arg4: nk_image, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_label(arg1: *mut nk_context,
                               arg2: *const ::std::os::raw::c_char,
                               alignment: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_combo_item_text(arg1: *mut nk_context,
                              arg2: *const ::std::os::raw::c_char,
                              arg3: ::std::os::raw::c_int,
                              alignment: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_combo_item_image_label(arg1: *mut nk_context, arg2: nk_image,
                                     arg3: *const ::std::os::raw::c_char,
                                     alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_image_text(arg1: *mut nk_context, arg2: nk_image,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: ::std::os::raw::c_int,
                                    alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_symbol_label(arg1: *mut nk_context,
                                      arg2: nk_symbol_type,
                                      arg3: *const ::std::os::raw::c_char,
                                      alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_item_symbol_text(arg1: *mut nk_context,
                                     arg2: nk_symbol_type,
                                     arg3: *const ::std::os::raw::c_char,
                                     arg4: ::std::os::raw::c_int,
                                     alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_combo_close(arg1: *mut nk_context);
    pub fn nk_combo_end(arg1: *mut nk_context);
    pub fn nk_contextual_begin(arg1: *mut nk_context, arg2: *mut nk_panel,
                               arg3: nk_flags, arg4: nk_vec2,
                               trigger_bounds: nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_text(arg1: *mut nk_context,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int,
                                   align: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_label(arg1: *mut nk_context,
                                    arg2: *const ::std::os::raw::c_char,
                                    align: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_image_label(arg1: *mut nk_context,
                                          arg2: nk_image,
                                          arg3: *const ::std::os::raw::c_char,
                                          alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_image_text(arg1: *mut nk_context,
                                         arg2: nk_image,
                                         arg3: *const ::std::os::raw::c_char,
                                         len: ::std::os::raw::c_int,
                                         alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_symbol_label(arg1: *mut nk_context,
                                           arg2: nk_symbol_type,
                                           arg3:
                                               *const ::std::os::raw::c_char,
                                           alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_item_symbol_text(arg1: *mut nk_context,
                                          arg2: nk_symbol_type,
                                          arg3: *const ::std::os::raw::c_char,
                                          arg4: ::std::os::raw::c_int,
                                          alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_contextual_close(arg1: *mut nk_context);
    pub fn nk_contextual_end(arg1: *mut nk_context);
    pub fn nk_tooltip(arg1: *mut nk_context,
                      arg2: *const ::std::os::raw::c_char);
    pub fn nk_tooltip_begin(arg1: *mut nk_context, arg2: *mut nk_panel,
                            width: f32) -> ::std::os::raw::c_int;
    pub fn nk_tooltip_end(arg1: *mut nk_context);
    pub fn nk_menubar_begin(arg1: *mut nk_context);
    pub fn nk_menubar_end(arg1: *mut nk_context);
    pub fn nk_menu_begin_text(arg1: *mut nk_context, arg2: *mut nk_panel,
                              title: *const ::std::os::raw::c_char,
                              title_len: ::std::os::raw::c_int,
                              align: nk_flags, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_label(arg1: *mut nk_context, arg2: *mut nk_panel,
                               arg3: *const ::std::os::raw::c_char,
                               align: nk_flags, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_image(arg1: *mut nk_context, arg2: *mut nk_panel,
                               arg3: *const ::std::os::raw::c_char,
                               arg4: nk_image, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_image_text(arg1: *mut nk_context,
                                    arg2: *mut nk_panel,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: ::std::os::raw::c_int,
                                    align: nk_flags, arg5: nk_image,
                                    size: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_image_label(arg1: *mut nk_context,
                                     arg2: *mut nk_panel,
                                     arg3: *const ::std::os::raw::c_char,
                                     align: nk_flags, arg4: nk_image,
                                     size: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_symbol(arg1: *mut nk_context, arg2: *mut nk_panel,
                                arg3: *const ::std::os::raw::c_char,
                                arg4: nk_symbol_type, size: nk_vec2)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_symbol_text(arg1: *mut nk_context,
                                     arg2: *mut nk_panel,
                                     arg3: *const ::std::os::raw::c_char,
                                     arg4: ::std::os::raw::c_int,
                                     align: nk_flags, arg5: nk_symbol_type,
                                     size: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_menu_begin_symbol_label(arg1: *mut nk_context,
                                      arg2: *mut nk_panel,
                                      arg3: *const ::std::os::raw::c_char,
                                      align: nk_flags, arg4: nk_symbol_type,
                                      size: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_menu_item_text(arg1: *mut nk_context,
                             arg2: *const ::std::os::raw::c_char,
                             arg3: ::std::os::raw::c_int, align: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_label(arg1: *mut nk_context,
                              arg2: *const ::std::os::raw::c_char,
                              alignment: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_menu_item_image_label(arg1: *mut nk_context, arg2: nk_image,
                                    arg3: *const ::std::os::raw::c_char,
                                    alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_image_text(arg1: *mut nk_context, arg2: nk_image,
                                   arg3: *const ::std::os::raw::c_char,
                                   len: ::std::os::raw::c_int,
                                   alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_symbol_text(arg1: *mut nk_context,
                                    arg2: nk_symbol_type,
                                    arg3: *const ::std::os::raw::c_char,
                                    arg4: ::std::os::raw::c_int,
                                    alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_item_symbol_label(arg1: *mut nk_context,
                                     arg2: nk_symbol_type,
                                     arg3: *const ::std::os::raw::c_char,
                                     alignment: nk_flags)
     -> ::std::os::raw::c_int;
    pub fn nk_menu_close(arg1: *mut nk_context);
    pub fn nk_menu_end(arg1: *mut nk_context);
    pub fn nk_convert(arg1: *mut nk_context, cmds: *mut nk_buffer,
                      vertices: *mut nk_buffer, elements: *mut nk_buffer,
                      arg2: *const nk_convert_config);
    pub fn nk__draw_begin(arg1: *const nk_context, arg2: *const nk_buffer)
     -> *const nk_draw_command;
    pub fn nk__draw_end(arg1: *const nk_context, arg2: *const nk_buffer)
     -> *const nk_draw_command;
    pub fn nk__draw_next(arg1: *const nk_draw_command, arg2: *const nk_buffer,
                         arg3: *const nk_context) -> *const nk_draw_command;
    pub fn nk_input_begin(arg1: *mut nk_context);
    pub fn nk_input_motion(arg1: *mut nk_context, x: ::std::os::raw::c_int,
                           y: ::std::os::raw::c_int);
    pub fn nk_input_key(arg1: *mut nk_context, arg2: nk_keys,
                        down: ::std::os::raw::c_int);
    pub fn nk_input_button(arg1: *mut nk_context, arg2: nk_buttons,
                           x: ::std::os::raw::c_int, y: ::std::os::raw::c_int,
                           down: ::std::os::raw::c_int);
    pub fn nk_input_scroll(arg1: *mut nk_context, y: f32);
    pub fn nk_input_char(arg1: *mut nk_context, arg2: ::std::os::raw::c_char);
    pub fn nk_input_glyph(arg1: *mut nk_context, arg2: nk_glyph);
    pub fn nk_input_unicode(arg1: *mut nk_context, arg2: nk_rune);
    pub fn nk_input_end(arg1: *mut nk_context);
    pub fn nk_style_default(arg1: *mut nk_context);
    pub fn nk_style_from_table(arg1: *mut nk_context, arg2: *const nk_color);
    pub fn nk_style_load_cursor(arg1: *mut nk_context, arg2: nk_style_cursor,
                                arg3: *const nk_cursor);
    pub fn nk_style_load_all_cursors(arg1: *mut nk_context,
                                     arg2: *mut nk_cursor);
    pub fn nk_style_get_color_by_name(arg1: nk_style_colors)
     -> *const ::std::os::raw::c_char;
    pub fn nk_style_set_font(arg1: *mut nk_context,
                             arg2: *const nk_user_font);
    pub fn nk_style_set_cursor(arg1: *mut nk_context, arg2: nk_style_cursor)
     -> ::std::os::raw::c_int;
    pub fn nk_style_show_cursor(arg1: *mut nk_context);
    pub fn nk_style_hide_cursor(arg1: *mut nk_context);
    pub fn nk_style_push_font(arg1: *mut nk_context, arg2: *mut nk_user_font)
     -> ::std::os::raw::c_int;
    pub fn nk_style_push_float(arg1: *mut nk_context, arg2: *mut f32,
                               arg3: f32) -> ::std::os::raw::c_int;
    pub fn nk_style_push_vec2(arg1: *mut nk_context, arg2: *mut nk_vec2,
                              arg3: nk_vec2) -> ::std::os::raw::c_int;
    pub fn nk_style_push_style_item(arg1: *mut nk_context,
                                    arg2: *mut nk_style_item,
                                    arg3: nk_style_item)
     -> ::std::os::raw::c_int;
    pub fn nk_style_push_flags(arg1: *mut nk_context, arg2: *mut nk_flags,
                               arg3: nk_flags) -> ::std::os::raw::c_int;
    pub fn nk_style_push_color(arg1: *mut nk_context, arg2: *mut nk_color,
                               arg3: nk_color) -> ::std::os::raw::c_int;
    pub fn nk_style_pop_font(arg1: *mut nk_context) -> ::std::os::raw::c_int;
    pub fn nk_style_pop_float(arg1: *mut nk_context) -> ::std::os::raw::c_int;
    pub fn nk_style_pop_vec2(arg1: *mut nk_context) -> ::std::os::raw::c_int;
    pub fn nk_style_pop_style_item(arg1: *mut nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_style_pop_flags(arg1: *mut nk_context) -> ::std::os::raw::c_int;
    pub fn nk_style_pop_color(arg1: *mut nk_context) -> ::std::os::raw::c_int;
    pub fn nk_widget_bounds(arg1: *mut nk_context) -> nk_rect;
    pub fn nk_widget_position(arg1: *mut nk_context) -> nk_vec2;
    pub fn nk_widget_size(arg1: *mut nk_context) -> nk_vec2;
    pub fn nk_widget_width(arg1: *mut nk_context) -> f32;
    pub fn nk_widget_height(arg1: *mut nk_context) -> f32;
    pub fn nk_widget_is_hovered(arg1: *mut nk_context)
     -> ::std::os::raw::c_int;
    pub fn nk_widget_is_mouse_clicked(arg1: *mut nk_context, arg2: nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_widget_has_mouse_click_down(arg1: *mut nk_context,
                                          arg2: nk_buttons,
                                          down: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_spacing(arg1: *mut nk_context, cols: ::std::os::raw::c_int);
    pub fn nk_widget(arg1: *mut nk_rect, arg2: *const nk_context)
     -> nk_widget_layout_states;
    pub fn nk_widget_fitting(arg1: *mut nk_rect, arg2: *mut nk_context,
                             arg3: nk_vec2) -> nk_widget_layout_states;
    pub fn nk_rgb(r: ::std::os::raw::c_int, g: ::std::os::raw::c_int,
                  b: ::std::os::raw::c_int) -> nk_color;
    pub fn nk_rgb_iv(rgb: *const ::std::os::raw::c_int) -> nk_color;
    pub fn nk_rgb_bv(rgb: *const nk_byte) -> nk_color;
    pub fn nk_rgb_f(r: f32, g: f32, b: f32) -> nk_color;
    pub fn nk_rgb_fv(rgb: *const f32) -> nk_color;
    pub fn nk_rgb_hex(rgb: *const ::std::os::raw::c_char) -> nk_color;
    pub fn nk_rgba(r: ::std::os::raw::c_int, g: ::std::os::raw::c_int,
                   b: ::std::os::raw::c_int, a: ::std::os::raw::c_int)
     -> nk_color;
    pub fn nk_rgba_u32(arg1: nk_uint) -> nk_color;
    pub fn nk_rgba_iv(rgba: *const ::std::os::raw::c_int) -> nk_color;
    pub fn nk_rgba_bv(rgba: *const nk_byte) -> nk_color;
    pub fn nk_rgba_f(r: f32, g: f32, b: f32, a: f32) -> nk_color;
    pub fn nk_rgba_fv(rgba: *const f32) -> nk_color;
    pub fn nk_rgba_hex(rgb: *const ::std::os::raw::c_char) -> nk_color;
    pub fn nk_hsv(h: ::std::os::raw::c_int, s: ::std::os::raw::c_int,
                  v: ::std::os::raw::c_int) -> nk_color;
    pub fn nk_hsv_iv(hsv: *const ::std::os::raw::c_int) -> nk_color;
    pub fn nk_hsv_bv(hsv: *const nk_byte) -> nk_color;
    pub fn nk_hsv_f(h: f32, s: f32, v: f32) -> nk_color;
    pub fn nk_hsv_fv(hsv: *const f32) -> nk_color;
    pub fn nk_hsva(h: ::std::os::raw::c_int, s: ::std::os::raw::c_int,
                   v: ::std::os::raw::c_int, a: ::std::os::raw::c_int)
     -> nk_color;
    pub fn nk_hsva_iv(hsva: *const ::std::os::raw::c_int) -> nk_color;
    pub fn nk_hsva_bv(hsva: *const nk_byte) -> nk_color;
    pub fn nk_hsva_f(h: f32, s: f32, v: f32, a: f32) -> nk_color;
    pub fn nk_hsva_fv(hsva: *const f32) -> nk_color;
    pub fn nk_color_f(r: *mut f32, g: *mut f32, b: *mut f32, a: *mut f32,
                      arg1: nk_color);
    pub fn nk_color_fv(rgba_out: *mut f32, arg1: nk_color);
    pub fn nk_color_u32(arg1: nk_color) -> nk_uint;
    pub fn nk_color_hex_rgba(output: *mut ::std::os::raw::c_char,
                             arg1: nk_color);
    pub fn nk_color_hex_rgb(output: *mut ::std::os::raw::c_char,
                            arg1: nk_color);
    pub fn nk_color_hsv_i(out_h: *mut ::std::os::raw::c_int,
                          out_s: *mut ::std::os::raw::c_int,
                          out_v: *mut ::std::os::raw::c_int, arg1: nk_color);
    pub fn nk_color_hsv_b(out_h: *mut nk_byte, out_s: *mut nk_byte,
                          out_v: *mut nk_byte, arg1: nk_color);
    pub fn nk_color_hsv_iv(hsv_out: *mut ::std::os::raw::c_int,
                           arg1: nk_color);
    pub fn nk_color_hsv_bv(hsv_out: *mut nk_byte, arg1: nk_color);
    pub fn nk_color_hsv_f(out_h: *mut f32, out_s: *mut f32, out_v: *mut f32,
                          arg1: nk_color);
    pub fn nk_color_hsv_fv(hsv_out: *mut f32, arg1: nk_color);
    pub fn nk_color_hsva_i(h: *mut ::std::os::raw::c_int,
                           s: *mut ::std::os::raw::c_int,
                           v: *mut ::std::os::raw::c_int,
                           a: *mut ::std::os::raw::c_int, arg1: nk_color);
    pub fn nk_color_hsva_b(h: *mut nk_byte, s: *mut nk_byte, v: *mut nk_byte,
                           a: *mut nk_byte, arg1: nk_color);
    pub fn nk_color_hsva_iv(hsva_out: *mut ::std::os::raw::c_int,
                            arg1: nk_color);
    pub fn nk_color_hsva_bv(hsva_out: *mut nk_byte, arg1: nk_color);
    pub fn nk_color_hsva_f(out_h: *mut f32, out_s: *mut f32, out_v: *mut f32,
                           out_a: *mut f32, arg1: nk_color);
    pub fn nk_color_hsva_fv(hsva_out: *mut f32, arg1: nk_color);
    pub fn nk_handle_ptr(arg1: *mut ::std::os::raw::c_void) -> nk_handle;
    pub fn nk_handle_id(arg1: ::std::os::raw::c_int) -> nk_handle;
    pub fn nk_image_handle(arg1: nk_handle) -> nk_image;
    pub fn nk_image_ptr(arg1: *mut ::std::os::raw::c_void) -> nk_image;
    pub fn nk_image_id(arg1: ::std::os::raw::c_int) -> nk_image;
    pub fn nk_image_is_subimage(img: *const nk_image)
     -> ::std::os::raw::c_int;
    pub fn nk_subimage_ptr(arg1: *mut ::std::os::raw::c_void,
                           w: ::std::os::raw::c_ushort,
                           h: ::std::os::raw::c_ushort, sub_region: nk_rect)
     -> nk_image;
    pub fn nk_subimage_id(arg1: ::std::os::raw::c_int,
                          w: ::std::os::raw::c_ushort,
                          h: ::std::os::raw::c_ushort, sub_region: nk_rect)
     -> nk_image;
    pub fn nk_subimage_handle(arg1: nk_handle, w: ::std::os::raw::c_ushort,
                              h: ::std::os::raw::c_ushort,
                              sub_region: nk_rect) -> nk_image;
    pub fn nk_murmur_hash(key: *const ::std::os::raw::c_void,
                          len: ::std::os::raw::c_int, seed: nk_hash)
     -> nk_hash;
    pub fn nk_triangle_from_direction(result: *mut nk_vec2, r: nk_rect,
                                      pad_x: f32, pad_y: f32,
                                      arg1: nk_heading);
    pub fn nk_vec2(x: f32, y: f32) -> nk_vec2;
    pub fn nk_vec2i(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int)
     -> nk_vec2;
    pub fn nk_vec2v(xy: *const f32) -> nk_vec2;
    pub fn nk_vec2iv(xy: *const ::std::os::raw::c_int) -> nk_vec2;
    pub fn nk_get_null_rect() -> nk_rect;
    pub fn nk_rect(x: f32, y: f32, w: f32, h: f32) -> nk_rect;
    pub fn nk_recti(x: ::std::os::raw::c_int, y: ::std::os::raw::c_int,
                    w: ::std::os::raw::c_int, h: ::std::os::raw::c_int)
     -> nk_rect;
    pub fn nk_recta(pos: nk_vec2, size: nk_vec2) -> nk_rect;
    pub fn nk_rectv(xywh: *const f32) -> nk_rect;
    pub fn nk_rectiv(xywh: *const ::std::os::raw::c_int) -> nk_rect;
    pub fn nk_rect_pos(arg1: nk_rect) -> nk_vec2;
    pub fn nk_rect_size(arg1: nk_rect) -> nk_vec2;
    pub fn nk_strlen(str: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_stricmp(s1: *const ::std::os::raw::c_char,
                      s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_stricmpn(s1: *const ::std::os::raw::c_char,
                       s2: *const ::std::os::raw::c_char,
                       n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn nk_strtoi(str: *const ::std::os::raw::c_char,
                     endptr: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_strtof(str: *const ::std::os::raw::c_char,
                     endptr: *mut *mut ::std::os::raw::c_char) -> f32;
    pub fn nk_strtod(str: *const ::std::os::raw::c_char,
                     endptr: *mut *mut ::std::os::raw::c_char) -> f64;
    pub fn nk_strfilter(text: *const ::std::os::raw::c_char,
                        regexp: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_strmatch_fuzzy_string(str: *const ::std::os::raw::c_char,
                                    pattern: *const ::std::os::raw::c_char,
                                    out_score: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_strmatch_fuzzy_text(txt: *const ::std::os::raw::c_char,
                                  txt_len: ::std::os::raw::c_int,
                                  pattern: *const ::std::os::raw::c_char,
                                  out_score: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_decode(arg1: *const ::std::os::raw::c_char,
                         arg2: *mut nk_rune, arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_encode(arg1: nk_rune, arg2: *mut ::std::os::raw::c_char,
                         arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_len(arg1: *const ::std::os::raw::c_char,
                      byte_len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_utf_at(buffer: *const ::std::os::raw::c_char,
                     length: ::std::os::raw::c_int,
                     index: ::std::os::raw::c_int, unicode: *mut nk_rune,
                     len: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn nk_buffer_init(arg1: *mut nk_buffer, arg2: *const nk_allocator,
                          size: nk_size);
    pub fn nk_buffer_init_fixed(arg1: *mut nk_buffer,
                                memory: *mut ::std::os::raw::c_void,
                                size: nk_size);
    pub fn nk_buffer_info(arg1: *mut nk_memory_status, arg2: *mut nk_buffer);
    pub fn nk_buffer_push(arg1: *mut nk_buffer,
                          type_: nk_buffer_allocation_type,
                          memory: *const ::std::os::raw::c_void,
                          size: nk_size, align: nk_size);
    pub fn nk_buffer_mark(arg1: *mut nk_buffer,
                          type_: nk_buffer_allocation_type);
    pub fn nk_buffer_reset(arg1: *mut nk_buffer,
                           type_: nk_buffer_allocation_type);
    pub fn nk_buffer_clear(arg1: *mut nk_buffer);
    pub fn nk_buffer_free(arg1: *mut nk_buffer);
    pub fn nk_buffer_memory(arg1: *mut nk_buffer)
     -> *mut ::std::os::raw::c_void;
    pub fn nk_buffer_memory_const(arg1: *const nk_buffer)
     -> *const ::std::os::raw::c_void;
    pub fn nk_buffer_total(arg1: *mut nk_buffer) -> nk_size;
    pub fn nk_str_init(arg1: *mut nk_str, arg2: *const nk_allocator,
                       size: nk_size);
    pub fn nk_str_init_fixed(arg1: *mut nk_str,
                             memory: *mut ::std::os::raw::c_void,
                             size: nk_size);
    pub fn nk_str_clear(arg1: *mut nk_str);
    pub fn nk_str_free(arg1: *mut nk_str);
    pub fn nk_str_append_text_char(arg1: *mut nk_str,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_str_char(arg1: *mut nk_str,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_text_utf8(arg1: *mut nk_str,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_str_utf8(arg1: *mut nk_str,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_text_runes(arg1: *mut nk_str, arg2: *const nk_rune,
                                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_append_str_runes(arg1: *mut nk_str, arg2: *const nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_at_char(arg1: *mut nk_str,
                                 pos: ::std::os::raw::c_int,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_at_rune(arg1: *mut nk_str,
                                 pos: ::std::os::raw::c_int,
                                 arg2: *const ::std::os::raw::c_char,
                                 arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_text_char(arg1: *mut nk_str,
                                   pos: ::std::os::raw::c_int,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_str_char(arg1: *mut nk_str,
                                  pos: ::std::os::raw::c_int,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_text_utf8(arg1: *mut nk_str,
                                   pos: ::std::os::raw::c_int,
                                   arg2: *const ::std::os::raw::c_char,
                                   arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_str_utf8(arg1: *mut nk_str,
                                  pos: ::std::os::raw::c_int,
                                  arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_text_runes(arg1: *mut nk_str,
                                    pos: ::std::os::raw::c_int,
                                    arg2: *const nk_rune,
                                    arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_str_insert_str_runes(arg1: *mut nk_str,
                                   pos: ::std::os::raw::c_int,
                                   arg2: *const nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_str_remove_chars(arg1: *mut nk_str, len: ::std::os::raw::c_int);
    pub fn nk_str_remove_runes(str: *mut nk_str, len: ::std::os::raw::c_int);
    pub fn nk_str_delete_chars(arg1: *mut nk_str, pos: ::std::os::raw::c_int,
                               len: ::std::os::raw::c_int);
    pub fn nk_str_delete_runes(arg1: *mut nk_str, pos: ::std::os::raw::c_int,
                               len: ::std::os::raw::c_int);
    pub fn nk_str_at_char(arg1: *mut nk_str, pos: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn nk_str_at_rune(arg1: *mut nk_str, pos: ::std::os::raw::c_int,
                          unicode: *mut nk_rune,
                          len: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
    pub fn nk_str_rune_at(arg1: *const nk_str, pos: ::std::os::raw::c_int)
     -> nk_rune;
    pub fn nk_str_at_char_const(arg1: *const nk_str,
                                pos: ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn nk_str_at_const(arg1: *const nk_str, pos: ::std::os::raw::c_int,
                           unicode: *mut nk_rune,
                           len: *mut ::std::os::raw::c_int)
     -> *const ::std::os::raw::c_char;
    pub fn nk_str_get(arg1: *mut nk_str) -> *mut ::std::os::raw::c_char;
    pub fn nk_str_get_const(arg1: *const nk_str)
     -> *const ::std::os::raw::c_char;
    pub fn nk_str_len(arg1: *mut nk_str) -> ::std::os::raw::c_int;
    pub fn nk_str_len_char(arg1: *mut nk_str) -> ::std::os::raw::c_int;
    pub fn nk_filter_default(arg1: *const nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_ascii(arg1: *const nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_float(arg1: *const nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_decimal(arg1: *const nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_hex(arg1: *const nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_oct(arg1: *const nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_filter_binary(arg1: *const nk_text_edit, unicode: nk_rune)
     -> ::std::os::raw::c_int;
    pub fn nk_textedit_init(arg1: *mut nk_text_edit, arg2: *mut nk_allocator,
                            size: nk_size);
    pub fn nk_textedit_init_fixed(arg1: *mut nk_text_edit,
                                  memory: *mut ::std::os::raw::c_void,
                                  size: nk_size);
    pub fn nk_textedit_free(arg1: *mut nk_text_edit);
    pub fn nk_textedit_text(arg1: *mut nk_text_edit,
                            arg2: *const ::std::os::raw::c_char,
                            total_len: ::std::os::raw::c_int);
    pub fn nk_textedit_delete(arg1: *mut nk_text_edit,
                              where_: ::std::os::raw::c_int,
                              len: ::std::os::raw::c_int);
    pub fn nk_textedit_delete_selection(arg1: *mut nk_text_edit);
    pub fn nk_textedit_select_all(arg1: *mut nk_text_edit);
    pub fn nk_textedit_cut(arg1: *mut nk_text_edit) -> ::std::os::raw::c_int;
    pub fn nk_textedit_paste(arg1: *mut nk_text_edit,
                             arg2: *const ::std::os::raw::c_char,
                             len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_textedit_undo(arg1: *mut nk_text_edit);
    pub fn nk_textedit_redo(arg1: *mut nk_text_edit);
    pub fn nk_font_default_glyph_ranges() -> *const nk_rune;
    pub fn nk_font_chinese_glyph_ranges() -> *const nk_rune;
    pub fn nk_font_cyrillic_glyph_ranges() -> *const nk_rune;
    pub fn nk_font_korean_glyph_ranges() -> *const nk_rune;
    pub fn nk_font_atlas_init(arg1: *mut nk_font_atlas,
                              arg2: *mut nk_allocator);
    pub fn nk_font_atlas_init_custom(arg1: *mut nk_font_atlas,
                                     persistent: *mut nk_allocator,
                                     transient: *mut nk_allocator);
    pub fn nk_font_atlas_begin(arg1: *mut nk_font_atlas);
    pub fn nk_font_config(pixel_height: f32) -> nk_font_config;
    pub fn nk_font_atlas_add(arg1: *mut nk_font_atlas,
                             arg2: *const nk_font_config) -> *mut nk_font;
    pub fn nk_font_atlas_add_from_memory(atlas: *mut nk_font_atlas,
                                         memory: *mut ::std::os::raw::c_void,
                                         size: nk_size, height: f32,
                                         config: *const nk_font_config)
     -> *mut nk_font;
    pub fn nk_font_atlas_add_compressed(arg1: *mut nk_font_atlas,
                                        memory: *mut ::std::os::raw::c_void,
                                        size: nk_size, height: f32,
                                        arg2: *const nk_font_config)
     -> *mut nk_font;
    pub fn nk_font_atlas_add_compressed_base85(arg1: *mut nk_font_atlas,
                                               data:
                                                   *const ::std::os::raw::c_char,
                                               height: f32,
                                               config: *const nk_font_config)
     -> *mut nk_font;
    pub fn nk_font_atlas_bake(arg1: *mut nk_font_atlas,
                              width: *mut ::std::os::raw::c_int,
                              height: *mut ::std::os::raw::c_int,
                              arg2: nk_font_atlas_format)
     -> *const ::std::os::raw::c_void;
    pub fn nk_font_atlas_end(arg1: *mut nk_font_atlas, tex: nk_handle,
                             arg2: *mut nk_draw_null_texture);
    pub fn nk_font_atlas_clear(arg1: *mut nk_font_atlas);
    pub fn nk_font_find_glyph(arg1: *mut nk_font, unicode: nk_rune)
     -> *const nk_font_glyph;
    pub fn nk_stroke_line(b: *mut nk_command_buffer, x0: f32, y0: f32,
                          x1: f32, y1: f32, line_thickness: f32,
                          arg1: nk_color);
    pub fn nk_stroke_curve(arg1: *mut nk_command_buffer, arg2: f32, arg3: f32,
                           arg4: f32, arg5: f32, arg6: f32, arg7: f32,
                           arg8: f32, arg9: f32, line_thickness: f32,
                           arg10: nk_color);
    pub fn nk_stroke_rect(arg1: *mut nk_command_buffer, arg2: nk_rect,
                          rounding: f32, line_thickness: f32, arg3: nk_color);
    pub fn nk_stroke_circle(arg1: *mut nk_command_buffer, arg2: nk_rect,
                            line_thickness: f32, arg3: nk_color);
    pub fn nk_stroke_arc(arg1: *mut nk_command_buffer, cx: f32, cy: f32,
                         radius: f32, a_min: f32, a_max: f32,
                         line_thickness: f32, arg2: nk_color);
    pub fn nk_stroke_triangle(arg1: *mut nk_command_buffer, arg2: f32,
                              arg3: f32, arg4: f32, arg5: f32, arg6: f32,
                              arg7: f32, line_thichness: f32, arg8: nk_color);
    pub fn nk_stroke_polyline(arg1: *mut nk_command_buffer, points: *mut f32,
                              point_count: ::std::os::raw::c_int,
                              line_thickness: f32, col: nk_color);
    pub fn nk_stroke_polygon(arg1: *mut nk_command_buffer, arg2: *mut f32,
                             point_count: ::std::os::raw::c_int,
                             line_thickness: f32, arg3: nk_color);
    pub fn nk_fill_rect(arg1: *mut nk_command_buffer, arg2: nk_rect,
                        rounding: f32, arg3: nk_color);
    pub fn nk_fill_rect_multi_color(arg1: *mut nk_command_buffer,
                                    arg2: nk_rect, left: nk_color,
                                    top: nk_color, right: nk_color,
                                    bottom: nk_color);
    pub fn nk_fill_circle(arg1: *mut nk_command_buffer, arg2: nk_rect,
                          arg3: nk_color);
    pub fn nk_fill_arc(arg1: *mut nk_command_buffer, cx: f32, cy: f32,
                       radius: f32, a_min: f32, a_max: f32, arg2: nk_color);
    pub fn nk_fill_triangle(arg1: *mut nk_command_buffer, x0: f32, y0: f32,
                            x1: f32, y1: f32, x2: f32, y2: f32,
                            arg2: nk_color);
    pub fn nk_fill_polygon(arg1: *mut nk_command_buffer, arg2: *mut f32,
                           point_count: ::std::os::raw::c_int,
                           arg3: nk_color);
    pub fn nk_push_scissor(arg1: *mut nk_command_buffer, arg2: nk_rect);
    pub fn nk_draw_image(arg1: *mut nk_command_buffer, arg2: nk_rect,
                         arg3: *const nk_image, arg4: nk_color);
    pub fn nk_draw_text(arg1: *mut nk_command_buffer, arg2: nk_rect,
                        text: *const ::std::os::raw::c_char,
                        len: ::std::os::raw::c_int, arg3: *const nk_user_font,
                        arg4: nk_color, arg5: nk_color);
    pub fn nk__next(arg1: *mut nk_context, arg2: *const nk_command)
     -> *const nk_command;
    pub fn nk__begin(arg1: *mut nk_context) -> *const nk_command;
    pub fn nk_input_has_mouse_click(arg1: *const nk_input, arg2: nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_input_has_mouse_click_in_rect(arg1: *const nk_input,
                                            arg2: nk_buttons, arg3: nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_has_mouse_click_down_in_rect(arg1: *const nk_input,
                                                 arg2: nk_buttons,
                                                 arg3: nk_rect,
                                                 down: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_click_in_rect(arg1: *const nk_input,
                                           arg2: nk_buttons, arg3: nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_click_down_in_rect(i: *const nk_input,
                                                id: nk_buttons, b: nk_rect,
                                                down: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn nk_input_any_mouse_click_in_rect(arg1: *const nk_input,
                                            arg2: nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_prev_hovering_rect(arg1: *const nk_input,
                                                arg2: nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_hovering_rect(arg1: *const nk_input,
                                           arg2: nk_rect)
     -> ::std::os::raw::c_int;
    pub fn nk_input_mouse_clicked(arg1: *const nk_input, arg2: nk_buttons,
                                  arg3: nk_rect) -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_down(arg1: *const nk_input, arg2: nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_pressed(arg1: *const nk_input, arg2: nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_mouse_released(arg1: *const nk_input, arg2: nk_buttons)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_key_pressed(arg1: *const nk_input, arg2: nk_keys)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_key_released(arg1: *const nk_input, arg2: nk_keys)
     -> ::std::os::raw::c_int;
    pub fn nk_input_is_key_down(arg1: *const nk_input, arg2: nk_keys)
     -> ::std::os::raw::c_int;
    pub fn nk_draw_list_init(arg1: *mut nk_draw_list);
    pub fn nk_draw_list_setup(canvas: *mut nk_draw_list,
                              config: *const nk_convert_config,
                              cmds: *mut nk_buffer, vertices: *mut nk_buffer,
                              elements: *mut nk_buffer);
    pub fn nk_draw_list_clear(list: *mut nk_draw_list);
    pub fn nk__draw_list_begin(arg1: *const nk_draw_list,
                               arg2: *const nk_buffer)
     -> *const nk_draw_command;
    pub fn nk__draw_list_next(arg1: *const nk_draw_command,
                              arg2: *const nk_buffer,
                              arg3: *const nk_draw_list)
     -> *const nk_draw_command;
    pub fn nk__draw_list_end(arg1: *const nk_draw_list,
                             arg2: *const nk_buffer)
     -> *const nk_draw_command;
    pub fn nk_draw_list_path_clear(arg1: *mut nk_draw_list);
    pub fn nk_draw_list_path_line_to(list: *mut nk_draw_list, pos: nk_vec2);
    pub fn nk_draw_list_path_arc_to_fast(arg1: *mut nk_draw_list,
                                         center: nk_vec2, radius: f32,
                                         a_min: ::std::os::raw::c_int,
                                         a_max: ::std::os::raw::c_int);
    pub fn nk_draw_list_path_arc_to(arg1: *mut nk_draw_list, center: nk_vec2,
                                    radius: f32, a_min: f32, a_max: f32,
                                    segments: ::std::os::raw::c_uint);
    pub fn nk_draw_list_path_rect_to(arg1: *mut nk_draw_list, a: nk_vec2,
                                     b: nk_vec2, rounding: f32);
    pub fn nk_draw_list_path_curve_to(arg1: *mut nk_draw_list, p2: nk_vec2,
                                      p3: nk_vec2, p4: nk_vec2,
                                      num_segments: ::std::os::raw::c_uint);
    pub fn nk_draw_list_path_fill(arg1: *mut nk_draw_list, arg2: nk_color);
    pub fn nk_draw_list_path_stroke(arg1: *mut nk_draw_list, arg2: nk_color,
                                    closed: nk_draw_list_stroke,
                                    thickness: f32);
    pub fn nk_draw_list_stroke_line(arg1: *mut nk_draw_list, a: nk_vec2,
                                    b: nk_vec2, arg2: nk_color,
                                    thickness: f32);
    pub fn nk_draw_list_stroke_rect(arg1: *mut nk_draw_list, rect: nk_rect,
                                    arg2: nk_color, rounding: f32,
                                    thickness: f32);
    pub fn nk_draw_list_stroke_triangle(arg1: *mut nk_draw_list, a: nk_vec2,
                                        b: nk_vec2, c: nk_vec2,
                                        arg2: nk_color, thickness: f32);
    pub fn nk_draw_list_stroke_circle(arg1: *mut nk_draw_list,
                                      center: nk_vec2, radius: f32,
                                      arg2: nk_color,
                                      segs: ::std::os::raw::c_uint,
                                      thickness: f32);
    pub fn nk_draw_list_stroke_curve(arg1: *mut nk_draw_list, p0: nk_vec2,
                                     cp0: nk_vec2, cp1: nk_vec2, p1: nk_vec2,
                                     arg2: nk_color,
                                     segments: ::std::os::raw::c_uint,
                                     thickness: f32);
    pub fn nk_draw_list_stroke_poly_line(arg1: *mut nk_draw_list,
                                         pnts: *const nk_vec2,
                                         cnt: ::std::os::raw::c_uint,
                                         arg2: nk_color,
                                         arg3: nk_draw_list_stroke,
                                         thickness: f32,
                                         arg4: nk_anti_aliasing);
    pub fn nk_draw_list_fill_rect(arg1: *mut nk_draw_list, rect: nk_rect,
                                  arg2: nk_color, rounding: f32);
    pub fn nk_draw_list_fill_rect_multi_color(list: *mut nk_draw_list,
                                              rect: nk_rect, left: nk_color,
                                              top: nk_color, right: nk_color,
                                              bottom: nk_color);
    pub fn nk_draw_list_fill_triangle(arg1: *mut nk_draw_list, a: nk_vec2,
                                      b: nk_vec2, c: nk_vec2, arg2: nk_color);
    pub fn nk_draw_list_fill_circle(arg1: *mut nk_draw_list, center: nk_vec2,
                                    radius: f32, col: nk_color,
                                    segs: ::std::os::raw::c_uint);
    pub fn nk_draw_list_fill_poly_convex(arg1: *mut nk_draw_list,
                                         points: *const nk_vec2,
                                         count: ::std::os::raw::c_uint,
                                         arg2: nk_color,
                                         arg3: nk_anti_aliasing);
    pub fn nk_draw_list_add_image(arg1: *mut nk_draw_list, texture: nk_image,
                                  rect: nk_rect, arg2: nk_color);
    pub fn nk_draw_list_add_text(arg1: *mut nk_draw_list,
                                 arg2: *const nk_user_font, arg3: nk_rect,
                                 text: *const ::std::os::raw::c_char,
                                 len: ::std::os::raw::c_int, font_height: f32,
                                 arg4: nk_color);
    pub fn nk_draw_list_push_userdata(arg1: *mut nk_draw_list,
                                      userdata: nk_handle);
    pub fn nk_style_item_image(img: nk_image) -> nk_style_item;
    pub fn nk_style_item_color(arg1: nk_color) -> nk_style_item;
    pub fn nk_style_item_hide() -> nk_style_item;
}
